<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="originalContent" value="# Microsoft Graph API Configuration&#10;CLIENT_ID=93d09ad1-eee7-41cd-b10d-b665e0963861&#10;CLIENT_SECRET=8Ga8Q~I2xhEKrrkV1rTBRPhFNsU.2G5G_iexIcF0&#10;TENANT_ID=54fb93be-4fed-46e8-b8cb-b557937f4612&#10;&#10;# Optional: Specific user email if needed&#10;USER_EMAIL=dlnivas@hotmail.com&#10;" />
              <option name="updatedContent" value="# Microsoft Graph API Configuration&#13;&#10;CLIENT_ID=93d09ad1-eee7-41cd-b10d-b665e0963861&#13;&#10;CLIENT_SECRET=8Ga8Q~I2xhEKrrkV1rTBRPhFNsU.2G5G_iexIcF0&#13;&#10;# Use 'common' for personal Microsoft accounts, or your tenant ID for organizational accounts&#13;&#10;TENANT_ID=common&#13;&#10;&#13;&#10;# Account type: 'personal' for Microsoft personal accounts, 'organizational' for Azure AD accounts&#13;&#10;ACCOUNT_TYPE=personal&#13;&#10;&#13;&#10;# Optional: Specific user email if needed&#13;&#10;USER_EMAIL=dlnivas@hotmail.com" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/AZURE_APP_FIX.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AZURE_APP_FIX.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;URGENT: Azure App Registration Fix for Personal Microsoft Accounts&#10;&#10;The error &quot;invalid_request: The provided value for the input parameter 'redirect_uri' is not valid&quot; &#10;means your app registration needs specific redirect URIs configured.&#10;&#10;STEP-BY-STEP FIX:&#10;================&#10;&#10;1. Go to Azure Portal (https://portal.azure.com)&#10;2. Navigate to &quot;Azure Active Directory&quot; &gt; &quot;App registrations&quot;&#10;3. Find your app registration (Client ID: 93d09ad1-eee7-41cd-b10d-b665e0963861)&#10;4. Click on &quot;Authentication&quot; in the left menu&#10;&#10;5. CRITICAL - Add these Redirect URIs:&#10;   Platform: &quot;Mobile and desktop applications&quot;&#10;   &#10;   Required URIs to add:&#10;   ✓ http://localhost&#10;   ✓ https://login.microsoftonline.com/common/oauth2/nativeclient&#10;   ✓ msal93d09ad1-eee7-41cd-b10d-b665e0963861://auth (replace with your actual client ID)&#10;&#10;6. CRITICAL - Supported account types:&#10;   ✓ Must be set to &quot;Personal Microsoft accounts only&quot; OR&#10;   ✓ &quot;Accounts in any organizational directory and personal Microsoft accounts&quot;&#10;&#10;7. Advanced settings (at bottom of Authentication page):&#10;   ✓ &quot;Allow public client flows&quot; = YES&#10;   ✓ &quot;Enable the following mobile and desktop flows&quot; = YES&#10;&#10;8. API Permissions:&#10;   ✓ Microsoft Graph &gt; Delegated permissions:&#10;     - Notes.Read&#10;     - Notes.ReadWrite&#10;   ✓ Click &quot;Grant admin consent&quot; if available&#10;&#10;9. Click &quot;Save&quot; at the top&#10;&#10;AFTER MAKING THESE CHANGES:&#10;==========================&#10;- Wait 5-10 minutes for changes to propagate&#10;- Run the script again: python create_pages.py&#10;&#10;If you still get redirect URI errors, the most common issue is:&#10;- Missing http://localhost redirect URI&#10;- App not configured for personal accounts&#10;- Public client flows not enabled&#10;&#10;QUICK TEST:&#10;==========&#10;Run: python check_config.py&#10;This will verify your configuration and provide additional guidance.&#10;&quot;&quot;&quot;&#10;&#10;print(__doc__)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/REDIRECT_URI_FIX.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/REDIRECT_URI_FIX.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;STEP-BY-STEP AZURE APP REGISTRATION FIX&#10;======================================&#10;&#10;URGENT: You need to configure redirect URIs in Azure Portal&#10;&#10;1. Go to https://portal.azure.com&#10;2. Navigate to &quot;Azure Active Directory&quot; → &quot;App registrations&quot;  &#10;3. Find your app: Client ID 93d09ad1-eee7-41cd-b10d-b665e0963861&#10;4. Click on your app registration&#10;5. In the left menu, click &quot;Authentication&quot;&#10;&#10;6. CRITICAL STEP - Add Redirect URIs:&#10;   - Click &quot;Add a platform&quot;&#10;   - Select &quot;Mobile and desktop applications&quot;&#10;   - Add these EXACT redirect URIs:&#10;     ✓ http://localhost&#10;     ✓ https://login.microsoftonline.com/common/oauth2/nativeclient&#10;     ✓ msal93d09ad1-eee7-41cd-b10d-b665e0963861://auth&#10;&#10;7. IMPORTANT SETTINGS:&#10;   - Supported account types: &quot;Personal Microsoft accounts only&quot; OR &#10;     &quot;Accounts in any organizational directory and personal Microsoft accounts&quot;&#10;   - Allow public client flows: YES&#10;   - Enable the following mobile and desktop flows: YES&#10;&#10;8. API Permissions:&#10;   - Microsoft Graph → Delegated permissions:&#10;     ✓ Notes.Read&#10;     ✓ Notes.ReadWrite&#10;   - Click &quot;Grant admin consent for [your directory]&quot;&#10;&#10;9. Click &quot;Save&quot; at the top&#10;&#10;WAIT TIME: After saving, wait 5-10 minutes for changes to propagate.&#10;&#10;TEST: Run python create_pages.py again after making these changes.&#10;&quot;&quot;&quot;&#10;&#10;print(__doc__)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/URGENT_AZURE_FIX.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/URGENT_AZURE_FIX.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10; CRITICAL AZURE APP REGISTRATION FIX NEEDED &#10;================================================&#10;&#10;Your app registration has two critical issues that need immediate fixing:&#10;&#10;ERROR 1: &quot;msal.oauth2cli.oidc.Client.obtain_token_by_browser() got multiple values for keyword argument 'redirect_uri'&quot;&#10;✅ FIXED: Removed explicit redirect_uri from code&#10;&#10;ERROR 2: &quot;The provided client is not supported for this feature. The client application must be marked as 'mobile.'&quot;&#10;❌ NEEDS FIXING: Your app registration is not properly configured for mobile/desktop apps&#10;&#10;IMMEDIATE AZURE PORTAL FIX REQUIRED:&#10;===================================&#10;&#10;1. Go to https://portal.azure.com&#10;2. Navigate to &quot;Azure Active Directory&quot; → &quot;App registrations&quot;&#10;3. Find your app: Client ID 93d09ad1-eee7-41cd-b10d-b665e0963861&#10;&#10;4.  CRITICAL: Click &quot;Authentication&quot; in left menu&#10;&#10;5.  CRITICAL: Add Platform for Mobile/Desktop:&#10;   - Click &quot;Add a platform&quot;&#10;   - Select &quot;Mobile and desktop applications&quot;&#10;   - Add these redirect URIs:&#10;     ✓ http://localhost&#10;     ✓ https://login.microsoftonline.com/common/oauth2/nativeclient&#10;     ✓ msal93d09ad1-eee7-41cd-b10d-b665e0963861://auth&#10;&#10;6.  CRITICAL: Set &quot;Supported account types&quot;:&#10;   Must be: &quot;Personal Microsoft accounts only&quot; OR&#10;           &quot;Accounts in any organizational directory and personal Microsoft accounts&quot;&#10;&#10;7.  CRITICAL: Enable public client flows:&#10;   Scroll down to &quot;Advanced settings&quot;&#10;   Set &quot;Allow public client flows&quot; = YES&#10;   Set &quot;Enable the following mobile and desktop flows&quot; = YES&#10;&#10;8. API Permissions (if not already set):&#10;   - Microsoft Graph → Delegated permissions:&#10;     ✓ Notes.Read&#10;     ✓ Notes.ReadWrite&#10;   - Click &quot;Grant admin consent&quot;&#10;&#10;9. Click &quot;Save&quot; at the top&#10;&#10;WHY THIS IS HAPPENING:&#10;=====================&#10;- Your app is configured as a &quot;Web&quot; application&#10;- Personal Microsoft accounts require &quot;Mobile and desktop&quot; application type&#10;- Device code flow requires public client capabilities&#10;&#10;AFTER MAKING CHANGES:&#10;====================&#10;1. Wait 5-10 minutes for Azure to propagate changes&#10;2. Run: python create_pages.py&#10;3. Authentication should work without errors&#10;&#10;VERIFICATION:&#10;============&#10;Your app registration should show:&#10;- Platform: &quot;Mobile and desktop applications&quot; ✓&#10;- Redirect URIs: At least &quot;http://localhost&quot; ✓&#10;- Supported accounts: Include personal accounts ✓&#10;- Public client flows: Enabled ✓&#10;&quot;&quot;&quot;&#10;&#10;print(__doc__)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/check_config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/check_config.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;App Registration Configuration Checker&#10;This script helps verify if your Azure app registration is properly configured for personal Microsoft accounts.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import requests&#10;from dotenv import load_dotenv&#10;&#10;def check_app_registration():&#10;    &quot;&quot;&quot;Check if the app registration is accessible and properly configured&quot;&quot;&quot;&#10;    load_dotenv()&#10;    &#10;    client_id = os.getenv('CLIENT_ID')&#10;    if not client_id:&#10;        print(&quot;❌ CLIENT_ID not found in .env file&quot;)&#10;        return False&#10;    &#10;    print(f&quot; Checking app registration: {client_id}&quot;)&#10;    &#10;    # Check if the app exists and is accessible&#10;    try:&#10;        # This endpoint provides public information about the app&#10;        url = f&quot;https://login.microsoftonline.com/common/v2.0/.well-known/openid_configuration&quot;&#10;        response = requests.get(url)&#10;        response.raise_for_status()&#10;        &#10;        print(&quot;✅ Microsoft identity platform is accessible&quot;)&#10;        &#10;        # Test the specific tenant/authority configuration&#10;        authority_url = &quot;https://login.microsoftonline.com/common/v2.0/.well-known/openid_configuration&quot;&#10;        auth_response = requests.get(authority_url)&#10;        auth_response.raise_for_status()&#10;        &#10;        print(&quot;✅ 'common' authority endpoint is accessible&quot;)&#10;        &#10;        return True&#10;        &#10;    except requests.exceptions.RequestException as e:&#10;        print(f&quot;❌ Error accessing Microsoft endpoints: {str(e)}&quot;)&#10;        return False&#10;&#10;def print_configuration_guide():&#10;    &quot;&quot;&quot;Print configuration guide for Azure app registration&quot;&quot;&quot;&#10;    print(&quot;\n Azure App Registration Configuration Checklist:&quot;)&#10;    print(&quot;=&quot; * 60)&#10;    &#10;    print(&quot;\n1.  Supported Account Types:&quot;)&#10;    print(&quot;   ✓ Should be set to 'Personal Microsoft accounts only' or&quot;)&#10;    print(&quot;   ✓ 'Accounts in any organizational directory and personal Microsoft accounts'&quot;)&#10;    &#10;    print(&quot;\n2.  Redirect URIs:&quot;)&#10;    print(&quot;   ✓ Platform: Mobile and desktop applications&quot;)&#10;    print(&quot;   ✓ Add: http://localhost&quot;)&#10;    print(&quot;   ✓ Add: https://login.microsoftonline.com/common/oauth2/nativeclient&quot;)&#10;    &#10;    print(&quot;\n3.  API Permissions:&quot;)&#10;    print(&quot;   ✓ Microsoft Graph &gt; Delegated permissions:&quot;)&#10;    print(&quot;     - Notes.Read&quot;)&#10;    print(&quot;     - Notes.ReadWrite&quot;) &#10;    print(&quot;   ✓ Grant admin consent (if required)&quot;)&#10;    &#10;    print(&quot;\n4.  What NOT to configure for personal accounts:&quot;)&#10;    print(&quot;   ✗ Don't add client secrets (not needed for public client)&quot;)&#10;    print(&quot;   ✗ Don't use application permissions (use delegated)&quot;)&#10;    print(&quot;   ✗ Don't restrict to specific tenant&quot;)&#10;    &#10;    print(&quot;\n5.  Advanced Settings:&quot;)&#10;    print(&quot;   ✓ 'Allow public client flows' should be 'Yes'&quot;)&#10;    print(&quot;   ✓ 'Supported account types' must include personal accounts&quot;)&#10;&#10;def main():&#10;    print(&quot;Azure App Registration Checker&quot;)&#10;    print(&quot;=&quot; * 40)&#10;    &#10;    # Check basic connectivity&#10;    if check_app_registration():&#10;        print(&quot;✅ Basic connectivity test passed&quot;)&#10;    else:&#10;        print(&quot;❌ Basic connectivity test failed&quot;)&#10;    &#10;    # Print configuration guide&#10;    print_configuration_guide()&#10;    &#10;    print(f&quot;\n Next Steps:&quot;)&#10;    print(&quot;1. Verify the above settings in Azure Portal&quot;)&#10;    print(&quot;2. Run the OneNote automation script again&quot;)&#10;    print(&quot;3. If still having issues, try creating a new app registration&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/create_pages.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/create_pages.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;OneNote Page Creator Utility&#10;Usage: python create_pages.py&#10;&quot;&quot;&quot;&#10;&#10;from onenote_automation import OneNoteAutomation&#10;&#10;def create_pages_interactive():&#10;    &quot;&quot;&quot;Interactive script to create OneNote pages&quot;&quot;&quot;&#10;    onenote = OneNoteAutomation()&#10;    &#10;    # Authenticate&#10;    print(&quot; Authenticating with Microsoft Graph...&quot;)&#10;    if not onenote.authenticate():&#10;        print(&quot;❌ Authentication failed. Please check your credentials in .env file.&quot;)&#10;        return&#10;    &#10;    print(&quot;✅ Authentication successful!\n&quot;)&#10;    &#10;    # Get notebooks&#10;    print(&quot; Available notebooks:&quot;)&#10;    notebooks = onenote.get_notebooks()&#10;    &#10;    if not notebooks:&#10;        print(&quot;❌ No notebooks found.&quot;)&#10;        return&#10;    &#10;    # Select notebook&#10;    while True:&#10;        notebook_name = input(&quot;\n Enter notebook name (or type 'list' to see all): &quot;).strip()&#10;        if notebook_name.lower() == 'list':&#10;            for nb in notebooks:&#10;                print(f&quot;  - {nb['displayName']}&quot;)&#10;            continue&#10;        &#10;        notebook = onenote.find_notebook_by_name(notebook_name)&#10;        if notebook:&#10;            break&#10;        print(f&quot;❌ Notebook '{notebook_name}' not found. Please try again.&quot;)&#10;    &#10;    # Get sections&#10;    print(f&quot;\n Available sections in '{notebook['displayName']}':&quot;)&#10;    sections = onenote.get_sections(notebook['id'])&#10;    &#10;    if not sections:&#10;        print(&quot;❌ No sections found in this notebook.&quot;)&#10;        return&#10;    &#10;    # Select section&#10;    while True:&#10;        section_name = input(&quot;\n Enter section name (or type 'list' to see all): &quot;).strip()&#10;        if section_name.lower() == 'list':&#10;            for sec in sections:&#10;                print(f&quot;  - {sec['displayName']}&quot;)&#10;            continue&#10;        &#10;        section = onenote.find_section_by_name(notebook['id'], section_name)&#10;        if section:&#10;            break&#10;        print(f&quot;❌ Section '{section_name}' not found. Please try again.&quot;)&#10;    &#10;    # Get page titles&#10;    print(f&quot;\n Enter page titles to create (one per line, empty line to finish):&quot;)&#10;    page_titles = []&#10;    while True:&#10;        title = input(&quot;Page title: &quot;).strip()&#10;        if not title:&#10;            break&#10;        page_titles.append(title)&#10;    &#10;    if not page_titles:&#10;        print(&quot;❌ No page titles provided.&quot;)&#10;        return&#10;    &#10;    # Confirm creation&#10;    print(f&quot;\n Summary:&quot;)&#10;    print(f&quot;  Notebook: {notebook['displayName']}&quot;)&#10;    print(f&quot;  Section: {section['displayName']}&quot;)&#10;    print(f&quot;  Pages to create: {len(page_titles)}&quot;)&#10;    for i, title in enumerate(page_titles, 1):&#10;        print(f&quot;    {i}. {title}&quot;)&#10;    &#10;    confirm = input(&quot;\n❓ Create these pages? (y/N): &quot;).strip().lower()&#10;    if confirm not in ['y', 'yes']:&#10;        print(&quot;❌ Operation cancelled.&quot;)&#10;        return&#10;    &#10;    # Create pages&#10;    print(f&quot;\n Creating pages...&quot;)&#10;    created_pages = onenote.create_multiple_pages(section['id'], page_titles)&#10;    &#10;    print(f&quot;\n✅ Done! {len(created_pages)} pages created successfully.&quot;)&#10;&#10;def create_pages_from_list():&#10;    &quot;&quot;&quot;Create pages from a predefined list&quot;&quot;&quot;&#10;    # Example configuration - modify as needed&#10;    NOTEBOOK_NAME = &quot;My Notebook&quot;&#10;    SECTION_NAME = &quot;General&quot;&#10;    PAGE_TITLES = [&#10;        &quot;Weekly Planning - July 30, 2025&quot;,&#10;        &quot;Project Milestones&quot;,&#10;        &quot;Meeting Notes Template&quot;,&#10;        &quot;Ideas &amp; Brainstorming&quot;,&#10;        &quot;Action Items&quot;&#10;    ]&#10;    &#10;    onenote = OneNoteAutomation()&#10;    &#10;    # Authenticate&#10;    print(&quot; Authenticating...&quot;)&#10;    if not onenote.authenticate():&#10;        print(&quot;❌ Authentication failed.&quot;)&#10;        return&#10;    &#10;    # Find notebook&#10;    print(f&quot; Finding notebook: {NOTEBOOK_NAME}&quot;)&#10;    notebook = onenote.find_notebook_by_name(NOTEBOOK_NAME)&#10;    if not notebook:&#10;        print(f&quot;❌ Notebook '{NOTEBOOK_NAME}' not found.&quot;)&#10;        print(&quot;Available notebooks:&quot;)&#10;        onenote.get_notebooks()&#10;        return&#10;    &#10;    # Find section&#10;    print(f&quot; Finding section: {SECTION_NAME}&quot;)&#10;    section = onenote.find_section_by_name(notebook['id'], SECTION_NAME)&#10;    if not section:&#10;        print(f&quot;❌ Section '{SECTION_NAME}' not found.&quot;)&#10;        print(&quot;Available sections:&quot;)&#10;        onenote.get_sections(notebook['id'])&#10;        return&#10;    &#10;    # Create pages&#10;    print(f&quot; Creating {len(PAGE_TITLES)} pages...&quot;)&#10;    created_pages = onenote.create_multiple_pages(section['id'], PAGE_TITLES)&#10;    &#10;    print(f&quot;✅ Done! {len(created_pages)} pages created.&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;OneNote Page Creator&quot;)&#10;    print(&quot;===================&quot;)&#10;    print(&quot;1. Interactive mode&quot;)&#10;    print(&quot;2. Create from predefined list&quot;)&#10;    &#10;    choice = input(&quot;\nSelect mode (1 or 2): &quot;).strip()&#10;    &#10;    if choice == &quot;1&quot;:&#10;        create_pages_interactive()&#10;    elif choice == &quot;2&quot;:&#10;        create_pages_from_list()&#10;    else:&#10;        print(&quot;❌ Invalid choice.&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/onenote_automation.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/onenote_automation.py" />
              <option name="originalContent" value="import os&#10;import requests&#10;import json&#10;import webbrowser&#10;import urllib.parse&#10;from msal import PublicClientApplication&#10;from dotenv import load_dotenv&#10;&#10;class OneNoteAutomation:&#10;    def __init__(self):&#10;        load_dotenv()&#10;        self.client_id = os.getenv('CLIENT_ID')&#10;        self.tenant_id = os.getenv('TENANT_ID', 'common')&#10;        self.account_type = os.getenv('ACCOUNT_TYPE', 'personal')&#10;        self.user_email = os.getenv('USER_EMAIL')&#10;&#10;        if not self.client_id:&#10;            raise ValueError(&quot;Missing CLIENT_ID in environment variables. Please check your .env file.&quot;)&#10;&#10;        # For personal accounts, use common endpoint&#10;        if self.account_type == 'personal':&#10;            self.authority = &quot;https://login.microsoftonline.com/common&quot;&#10;            self.scope = [&#10;                &quot;https://graph.microsoft.com/Notes.ReadWrite&quot;,&#10;                &quot;https://graph.microsoft.com/Notes.Read&quot;&#10;            ]&#10;        else:&#10;            self.authority = f&quot;https://login.microsoftonline.com/{self.tenant_id}&quot;&#10;            self.scope = [&quot;https://graph.microsoft.com/.default&quot;]&#10;&#10;        self.graph_url = &quot;https://graph.microsoft.com/v1.0&quot;&#10;&#10;        # Use PublicClientApplication for personal accounts&#10;        self.app = PublicClientApplication(&#10;            client_id=self.client_id,&#10;            authority=self.authority&#10;        )&#10;&#10;        self.access_token = None&#10;        self.account = None&#10;&#10;    def authenticate(self):&#10;        &quot;&quot;&quot;Authenticate using interactive browser flow for personal accounts&quot;&quot;&quot;&#10;        try:&#10;            # Try to get token silently first (if user has authenticated before)&#10;            accounts = self.app.get_accounts()&#10;            if accounts:&#10;                print(&quot;Found existing account, attempting silent authentication...&quot;)&#10;                result = self.app.acquire_token_silent(self.scope, account=accounts[0])&#10;                if result and &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    self.account = accounts[0]&#10;                    print(&quot;✅ Silent authentication successful!&quot;)&#10;                    return True&#10;&#10;            # If silent auth fails, use interactive browser flow&#10;            print(&quot;Starting interactive authentication...&quot;)&#10;            print(&quot;This will open a browser window for authentication.&quot;)&#10;&#10;            try:&#10;                # Try interactive browser flow first (more reliable)&#10;                result = self.app.acquire_token_interactive(&#10;                    scopes=self.scope,&#10;                    prompt=&quot;select_account&quot;&#10;                    # Remove explicit redirect_uri - MSAL handles this automatically&#10;                )&#10;&#10;                if &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;                else:&#10;                    print(f&quot;❌ Interactive authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#10;&#10;            except Exception as interactive_error:&#10;                print(f&quot;Interactive flow failed: {str(interactive_error)}&quot;)&#10;                print(&quot;Falling back to device code flow...&quot;)&#10;&#10;                # Fallback to device code flow&#10;                flow = self.app.initiate_device_flow(scopes=self.scope)&#10;&#10;                if &quot;user_code&quot; not in flow:&#10;                    print(f&quot;Device flow error: {flow.get('error', 'Unknown error')}&quot;)&#10;                    print(f&quot;Error description: {flow.get('error_description', 'No description')}&quot;)&#10;                    raise ValueError(&quot;Failed to create device flow&quot;)&#10;&#10;                print(f&quot;\n Please visit: {flow['verification_uri']}&quot;)&#10;                print(f&quot; Enter code: {flow['user_code']}&quot;)&#10;                print(&quot;\nOpening browser automatically...&quot;)&#10;&#10;                # Open browser automatically&#10;                webbrowser.open(flow['verification_uri'])&#10;&#10;                input(&quot;\nPress Enter after completing authentication in the browser...&quot;)&#10;&#10;                # Complete the flow&#10;                result = self.app.acquire_token_by_device_flow(flow)&#10;&#10;                if &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;                else:&#10;                    print(f&quot;❌ Device flow authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#10;                    return False&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Authentication error: {str(e)}&quot;)&#10;            print(&quot;\n Troubleshooting tips:&quot;)&#10;            print(&quot;1. Make sure your app registration supports 'Personal Microsoft accounts'&quot;)&#10;            print(&quot;2. Check that your CLIENT_ID is correct&quot;)&#10;            print(&quot;3. Verify the app has proper redirect URIs configured&quot;)&#10;            print(&quot;4. Ensure the app has Notes.ReadWrite permissions&quot;)&#10;            print(&quot;5. Add 'http://localhost' as a redirect URI in Azure Portal&quot;)&#10;            return False&#10;&#10;    def get_headers(self):&#10;        &quot;&quot;&quot;Get headers for API requests&quot;&quot;&quot;&#10;        if not self.access_token:&#10;            raise ValueError(&quot;Not authenticated. Call authenticate() first.&quot;)&#10;&#10;        return {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': 'application/json'&#10;        }&#10;&#10;    def get_notebooks(self):&#10;        &quot;&quot;&quot;Get all notebooks for the authenticated user&quot;&quot;&quot;&#10;        try:&#10;            # For personal accounts, use /me endpoint&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks&quot;&#10;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            notebooks = response.json().get('value', [])&#10;            print(f&quot; Found {len(notebooks)} notebooks:&quot;)&#10;            for nb in notebooks:&#10;                print(f&quot;   {nb['displayName']} (ID: {nb['id']})&quot;)&#10;&#10;            return notebooks&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting notebooks: {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return []&#10;&#10;    def get_sections(self, notebook_id):&#10;        &quot;&quot;&quot;Get all sections in a notebook&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks/{notebook_id}/sections&quot;&#10;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            sections = response.json().get('value', [])&#10;            print(f&quot; Found {len(sections)} sections:&quot;)&#10;            for section in sections:&#10;                print(f&quot;   {section['displayName']} (ID: {section['id']})&quot;)&#10;&#10;            return sections&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting sections: {str(e)}&quot;)&#10;            return []&#10;&#10;    def create_page(self, section_id, page_title, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page in a specific section&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;&#10;            # Create HTML content for the page&#10;            html_content = f&quot;&quot;&quot;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{page_title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div&gt;&#10;        &lt;p style=&quot;font-size: 18pt; font-weight: bold; margin: 0;&quot;&gt;{escaped_title}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;h1&gt;{page_title}&lt;/h1&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;&#10;            headers = self.get_headers()&#10;&lt;/html&gt;&#10;&quot;&quot;&quot;&#10;&#10;            response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#10;            response.raise_for_status()&#10;&#10;            page_data = response.json()&#10;            print(f&quot;✅ Page '{page_title}' created successfully!&quot;)&#10;            print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#10;&#10;            # Try to get the web URL&#10;            web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#10;            if web_url:&#10;                print(f&quot;    Page URL: {web_url}&quot;)&#10;&#10;            return page_data&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error creating page '{page_title}': {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return None&#10;&#10;    def create_multiple_pages(self, section_id, page_titles):&#10;        &quot;&quot;&quot;Create multiple pages with given titles&quot;&quot;&quot;&#10;        created_pages = []&#10;&#10;        print(f&quot;\n Creating {len(page_titles)} pages...&quot;)&#10;        for i, title in enumerate(page_titles, 1):&#10;            print(f&quot;\n Creating page {i}/{len(page_titles)}: {title}&quot;)&#10;            page = self.create_page(section_id, title)&#10;            if page:&#10;                created_pages.append(page)&#10;&#10;        print(f&quot;\n✅ Summary: {len(created_pages)} out of {len(page_titles)} pages created successfully.&quot;)&#10;        return created_pages&#10;&#10;    def find_notebook_by_name(self, notebook_name):&#10;        &quot;&quot;&quot;Find a notebook by name&quot;&quot;&quot;&#10;        notebooks = self.get_notebooks()&#10;        for notebook in notebooks:&#10;            if notebook['displayName'].lower() == notebook_name.lower():&#10;                return notebook&#10;        return None&#10;&#10;    def find_section_by_name(self, notebook_id, section_name):&#10;        &quot;&quot;&quot;Find a section by name within a notebook&quot;&quot;&quot;&#10;        sections = self.get_sections(notebook_id)&#10;        for section in sections:&#10;            if section['displayName'].lower() == section_name.lower():&#10;                return section&#10;        return None&#10;&#10;    def _get_current_datetime(self):&#10;        &quot;&quot;&quot;Get current datetime in ISO format&quot;&quot;&quot;&#10;        from datetime import datetime&#10;        return datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#10;&#10;def main():&#10;    &quot;&quot;&quot;Example usage&quot;&quot;&quot;&#10;    onenote = OneNoteAutomation()&#10;&#10;    # Authenticate&#10;    print(&quot; Starting authentication for personal Microsoft account...&quot;)&#10;    if not onenote.authenticate():&#10;        print(&quot;❌ Failed to authenticate. Please check your app registration and permissions.&quot;)&#10;        return&#10;&#10;    # Example: Create pages in a specific notebook and section&#10;    notebook_name = &quot;My Notebook&quot;  # Replace with your notebook name&#10;    section_name = &quot;General&quot;       # Replace with your section name&#10;&#10;    page_titles = [&#10;        &quot;Meeting Notes - July 30, 2025&quot;,&#10;        &quot;Project Planning Ideas&quot;,&#10;        &quot;Daily Task List&quot;,&#10;        &quot;Brainstorming Session&quot;&#10;    ]&#10;&#10;    # Find notebook&#10;    print(f&quot;\n Looking for notebook: {notebook_name}&quot;)&#10;    notebook = onenote.find_notebook_by_name(notebook_name)&#10;&#10;    if not notebook:&#10;        print(f&quot;❌ Notebook '{notebook_name}' not found.&quot;)&#10;        print(&quot;\nℹ️  Available notebooks:&quot;)&#10;        onenote.get_notebooks()&#10;        return&#10;&#10;    # Find section&#10;    print(f&quot;\n Looking for section: {section_name}&quot;)&#10;    section = onenote.find_section_by_name(notebook['id'], section_name)&#10;&#10;    if not section:&#10;        print(f&quot;❌ Section '{section_name}' not found.&quot;)&#10;        print(f&quot;\nℹ️  Available sections in '{notebook_name}':&quot;)&#10;        onenote.get_sections(notebook['id'])&#10;        return&#10;&#10;    # Create pages&#10;    print(f&quot;\n Creating pages in notebook '{notebook_name}' &gt; section '{section_name}'&quot;)&#10;    onenote.create_multiple_pages(section['id'], page_titles)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()&#10;" />
              <option name="updatedContent" value="import os&#13;&#10;import requests&#13;&#10;import json&#13;&#10;import webbrowser&#13;&#10;import urllib.parse&#13;&#10;from msal import PublicClientApplication&#13;&#10;from dotenv import load_dotenv&#13;&#10;&#13;&#10;class OneNoteAutomation:&#13;&#10;    def __init__(self):&#13;&#10;        load_dotenv()&#13;&#10;        self.client_id = os.getenv('CLIENT_ID')&#13;&#10;        self.tenant_id = os.getenv('TENANT_ID', 'common')&#13;&#10;        self.account_type = os.getenv('ACCOUNT_TYPE', 'personal')&#13;&#10;        self.user_email = os.getenv('USER_EMAIL')&#13;&#10;&#13;&#10;        if not self.client_id:&#13;&#10;            raise ValueError(&quot;Missing CLIENT_ID in environment variables. Please check your .env file.&quot;)&#13;&#10;&#13;&#10;        # For personal accounts, use common endpoint&#13;&#10;        if self.account_type == 'personal':&#13;&#10;            self.authority = &quot;https://login.microsoftonline.com/common&quot;&#13;&#10;            self.scope = [&#13;&#10;                &quot;https://graph.microsoft.com/Notes.ReadWrite&quot;,&#13;&#10;                &quot;https://graph.microsoft.com/Notes.Read&quot;&#13;&#10;            ]&#13;&#10;        else:&#13;&#10;            self.authority = f&quot;https://login.microsoftonline.com/{self.tenant_id}&quot;&#13;&#10;            self.scope = [&quot;https://graph.microsoft.com/.default&quot;]&#13;&#10;&#13;&#10;        self.graph_url = &quot;https://graph.microsoft.com/v1.0&quot;&#13;&#10;&#13;&#10;        # Use PublicClientApplication for personal accounts&#13;&#10;        self.app = PublicClientApplication(&#13;&#10;            client_id=self.client_id,&#13;&#10;            authority=self.authority&#13;&#10;        )&#13;&#10;&#13;&#10;        self.access_token = None&#13;&#10;        self.account = None&#13;&#10;&#13;&#10;    def authenticate(self):&#13;&#10;        &quot;&quot;&quot;Authenticate using interactive browser flow for personal accounts&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            # Try to get token silently first (if user has authenticated before)&#13;&#10;            accounts = self.app.get_accounts()&#13;&#10;            if accounts:&#13;&#10;                print(&quot;Found existing account, attempting silent authentication...&quot;)&#13;&#10;                result = self.app.acquire_token_silent(self.scope, account=accounts[0])&#13;&#10;                if result and &quot;access_token&quot; in result:&#13;&#10;                    self.access_token = result[&quot;access_token&quot;]&#13;&#10;                    self.account = accounts[0]&#13;&#10;                    print(&quot;✅ Silent authentication successful!&quot;)&#13;&#10;                    return True&#13;&#10;&#13;&#10;            # If silent auth fails, use interactive browser flow&#13;&#10;            print(&quot;Starting interactive authentication...&quot;)&#13;&#10;            print(&quot;This will open a browser window for authentication.&quot;)&#13;&#10;&#13;&#10;            try:&#13;&#10;                # Try interactive browser flow first (more reliable)&#13;&#10;                result = self.app.acquire_token_interactive(&#13;&#10;                    scopes=self.scope,&#13;&#10;                    prompt=&quot;select_account&quot;&#13;&#10;                    # Remove explicit redirect_uri - MSAL handles this automatically&#13;&#10;                )&#13;&#10;&#13;&#10;                if &quot;access_token&quot; in result:&#13;&#10;                    self.access_token = result[&quot;access_token&quot;]&#13;&#10;                    print(&quot;✅ Authentication successful!&quot;)&#13;&#10;                    return True&#13;&#10;                else:&#13;&#10;                    print(f&quot;❌ Interactive authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#13;&#10;&#13;&#10;            except Exception as interactive_error:&#13;&#10;                print(f&quot;Interactive flow failed: {str(interactive_error)}&quot;)&#13;&#10;                print(&quot;Falling back to device code flow...&quot;)&#13;&#10;&#13;&#10;                # Fallback to device code flow&#13;&#10;                flow = self.app.initiate_device_flow(scopes=self.scope)&#13;&#10;&#13;&#10;                if &quot;user_code&quot; not in flow:&#13;&#10;                    print(f&quot;Device flow error: {flow.get('error', 'Unknown error')}&quot;)&#13;&#10;                    print(f&quot;Error description: {flow.get('error_description', 'No description')}&quot;)&#13;&#10;                    raise ValueError(&quot;Failed to create device flow&quot;)&#13;&#10;&#13;&#10;                print(f&quot;\n Please visit: {flow['verification_uri']}&quot;)&#13;&#10;                print(f&quot; Enter code: {flow['user_code']}&quot;)&#13;&#10;                print(&quot;\nOpening browser automatically...&quot;)&#13;&#10;&#13;&#10;                # Open browser automatically&#13;&#10;                webbrowser.open(flow['verification_uri'])&#13;&#10;&#13;&#10;                input(&quot;\nPress Enter after completing authentication in the browser...&quot;)&#13;&#10;&#13;&#10;                # Complete the flow&#13;&#10;                result = self.app.acquire_token_by_device_flow(flow)&#13;&#10;&#13;&#10;                if &quot;access_token&quot; in result:&#13;&#10;                    self.access_token = result[&quot;access_token&quot;]&#13;&#10;                    print(&quot;✅ Authentication successful!&quot;)&#13;&#10;                    return True&#13;&#10;                else:&#13;&#10;                    print(f&quot;❌ Device flow authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#13;&#10;                    return False&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            print(f&quot;❌ Authentication error: {str(e)}&quot;)&#13;&#10;            print(&quot;\n Troubleshooting tips:&quot;)&#13;&#10;            print(&quot;1. Make sure your app registration supports 'Personal Microsoft accounts'&quot;)&#13;&#10;            print(&quot;2. Check that your CLIENT_ID is correct&quot;)&#13;&#10;            print(&quot;3. Verify the app has proper redirect URIs configured&quot;)&#13;&#10;            print(&quot;4. Ensure the app has Notes.ReadWrite permissions&quot;)&#13;&#10;            print(&quot;5. Add 'http://localhost' as a redirect URI in Azure Portal&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;    def get_headers(self):&#13;&#10;        &quot;&quot;&quot;Get headers for API requests&quot;&quot;&quot;&#13;&#10;        if not self.access_token:&#13;&#10;            raise ValueError(&quot;Not authenticated. Call authenticate() first.&quot;)&#13;&#10;&#13;&#10;        return {&#13;&#10;            'Authorization': f'Bearer {self.access_token}',&#13;&#10;            'Content-Type': 'application/json'&#13;&#10;        }&#13;&#10;&#13;&#10;    def get_notebooks(self):&#13;&#10;        &quot;&quot;&quot;Get all notebooks for the authenticated user&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            # For personal accounts, use /me endpoint&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks&quot;&#13;&#10;&#13;&#10;            response = requests.get(url, headers=self.get_headers())&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            notebooks = response.json().get('value', [])&#13;&#10;            print(f&quot; Found {len(notebooks)} notebooks:&quot;)&#13;&#10;            for nb in notebooks:&#13;&#10;                print(f&quot;   {nb['displayName']} (ID: {nb['id']})&quot;)&#13;&#10;&#13;&#10;            return notebooks&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error getting notebooks: {str(e)}&quot;)&#13;&#10;            if hasattr(e, 'response') and e.response is not None:&#13;&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#13;&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#13;&#10;            return []&#13;&#10;&#13;&#10;    def get_sections(self, notebook_id):&#13;&#10;        &quot;&quot;&quot;Get all sections in a notebook&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks/{notebook_id}/sections&quot;&#13;&#10;&#13;&#10;            response = requests.get(url, headers=self.get_headers())&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            sections = response.json().get('value', [])&#13;&#10;            print(f&quot; Found {len(sections)} sections:&quot;)&#13;&#10;            for section in sections:&#13;&#10;                print(f&quot;   {section['displayName']} (ID: {section['id']})&quot;)&#13;&#10;&#13;&#10;            return sections&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error getting sections: {str(e)}&quot;)&#13;&#10;            return []&#13;&#10;&#13;&#10;    def create_page(self, section_id, page_title, page_content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create a new page in a specific section&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#13;&#10;&#13;&#10;            # Escape HTML characters in title to preserve exact formatting&#13;&#10;            import html&#13;&#10;            escaped_title = html.escape(page_title)&#13;&#10;            &#13;&#10;            # Create HTML content for the page with preserved formatting&#13;&#10;            html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;title&gt;{escaped_title}&lt;/title&gt;&#13;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    &lt;div&gt;&#13;&#10;        &lt;p style=&quot;font-size: 18pt; font-weight: bold; margin: 0;&quot;&gt;{escaped_title}&lt;/p&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;    {page_content if page_content else ''}&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;&quot;&quot;&quot;&#13;&#10;&#13;&#10;            headers = self.get_headers()&#13;&#10;            headers['Content-Type'] = 'text/html'&#13;&#10;&#13;&#10;            response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            page_data = response.json()&#13;&#10;            print(f&quot;✅ Page '{page_title}' created successfully!&quot;)&#13;&#10;            print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#13;&#10;&#13;&#10;            # Try to get the web URL&#13;&#10;            web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#13;&#10;            if web_url:&#13;&#10;                print(f&quot;    Page URL: {web_url}&quot;)&#13;&#10;&#13;&#10;            return page_data&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error creating page '{page_title}': {str(e)}&quot;)&#13;&#10;            if hasattr(e, 'response') and e.response is not None:&#13;&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#13;&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def create_multiple_pages(self, section_id, page_titles):&#13;&#10;        &quot;&quot;&quot;Create multiple pages with given titles&quot;&quot;&quot;&#13;&#10;        created_pages = []&#13;&#10;&#13;&#10;        print(f&quot;\n Creating {len(page_titles)} pages...&quot;)&#13;&#10;        for i, title in enumerate(page_titles, 1):&#13;&#10;            print(f&quot;\n Creating page {i}/{len(page_titles)}: {title}&quot;)&#13;&#10;            page = self.create_page(section_id, title)&#13;&#10;            if page:&#13;&#10;                created_pages.append(page)&#13;&#10;&#13;&#10;        print(f&quot;\n✅ Summary: {len(created_pages)} out of {len(page_titles)} pages created successfully.&quot;)&#13;&#10;        return created_pages&#13;&#10;&#13;&#10;    def find_notebook_by_name(self, notebook_name):&#13;&#10;        &quot;&quot;&quot;Find a notebook by name&quot;&quot;&quot;&#13;&#10;        notebooks = self.get_notebooks()&#13;&#10;        for notebook in notebooks:&#13;&#10;            if notebook['displayName'].lower() == notebook_name.lower():&#13;&#10;                return notebook&#13;&#10;        return None&#13;&#10;&#13;&#10;    def find_section_by_name(self, notebook_id, section_name):&#13;&#10;        &quot;&quot;&quot;Find a section by name within a notebook&quot;&quot;&quot;&#13;&#10;        sections = self.get_sections(notebook_id)&#13;&#10;        for section in sections:&#13;&#10;            if section['displayName'].lower() == section_name.lower():&#13;&#10;                return section&#13;&#10;        return None&#13;&#10;&#13;&#10;    def _get_current_datetime(self):&#13;&#10;        &quot;&quot;&quot;Get current datetime in ISO format&quot;&quot;&quot;&#13;&#10;        from datetime import datetime&#13;&#10;        return datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#13;&#10;&#13;&#10;def main():&#13;&#10;    &quot;&quot;&quot;Example usage&quot;&quot;&quot;&#13;&#10;    onenote = OneNoteAutomation()&#13;&#10;&#13;&#10;    # Authenticate&#13;&#10;    print(&quot; Starting authentication for personal Microsoft account...&quot;)&#13;&#10;    if not onenote.authenticate():&#13;&#10;        print(&quot;❌ Failed to authenticate. Please check your app registration and permissions.&quot;)&#13;&#10;        return&#13;&#10;&#13;&#10;    # Example: Create pages in a specific notebook and section&#13;&#10;    notebook_name = &quot;My Notebook&quot;  # Replace with your notebook name&#13;&#10;    section_name = &quot;General&quot;       # Replace with your section name&#13;&#10;&#13;&#10;    page_titles = [&#13;&#10;        &quot;Meeting Notes - July 30, 2025&quot;,&#13;&#10;        &quot;Project Planning Ideas&quot;,&#13;&#10;        &quot;Daily Task List&quot;,&#13;&#10;        &quot;Brainstorming Session&quot;&#13;&#10;    ]&#13;&#10;&#13;&#10;    # Find notebook&#13;&#10;    print(f&quot;\n Looking for notebook: {notebook_name}&quot;)&#13;&#10;    notebook = onenote.find_notebook_by_name(notebook_name)&#13;&#10;&#13;&#10;    if not notebook:&#13;&#10;        print(f&quot;❌ Notebook '{notebook_name}' not found.&quot;)&#13;&#10;        print(&quot;\nℹ️  Available notebooks:&quot;)&#13;&#10;        onenote.get_notebooks()&#13;&#10;        return&#13;&#10;&#13;&#10;    # Find section&#13;&#10;    print(f&quot;\n Looking for section: {section_name}&quot;)&#13;&#10;    section = onenote.find_section_by_name(notebook['id'], section_name)&#13;&#10;&#13;&#10;    if not section:&#13;&#10;        print(f&quot;❌ Section '{section_name}' not found.&quot;)&#13;&#10;        print(f&quot;\nℹ️  Available sections in '{notebook_name}':&quot;)&#13;&#10;        onenote.get_sections(notebook['id'])&#13;&#10;        return&#13;&#10;&#13;&#10;    # Create pages&#13;&#10;    print(f&quot;\n Creating pages in notebook '{notebook_name}' &gt; section '{section_name}'&quot;)&#13;&#10;    onenote.create_multiple_pages(section['id'], page_titles)&#13;&#10;&#13;&#10;if __name__ == &quot;__main__&quot;:&#13;&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="updatedContent" value="requests==2.31.0&#10;msal==1.24.1&#10;python-dotenv==1.0.0" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>