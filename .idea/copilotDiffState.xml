<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="originalContent" value="# Microsoft Graph API Configuration&#10;CLIENT_ID=93d09ad1-eee7-41cd-b10d-b665e0963861&#10;CLIENT_SECRET=8Ga8Q~I2xhEKrrkV1rTBRPhFNsU.2G5G_iexIcF0&#10;# Use 'common' for personal Microsoft accounts, or your tenant ID for organizational accounts&#10;TENANT_ID=common&#10;&#10;# Account type: 'personal' for Microsoft personal accounts, 'organizational' for Azure AD accounts&#10;ACCOUNT_TYPE=personal&#10;&#10;# Optional: Specific user email if needed&#10;USER_EMAIL=dlnivas@hotmail.com&#10;" />
              <option name="updatedContent" value="# Microsoft Graph API Configuration&#13;&#10;CLIENT_ID=93d09ad1-eee7-41cd-b10d-b665e0963861&#13;&#10;CLIENT_SECRET=8Ga8Q~I2xhEKrrkV1rTBRPhFNsU.2G5G_iexIcF0&#13;&#10;# Use 'common' for personal Microsoft accounts, or your tenant ID for organizational accounts&#13;&#10;TENANT_ID=common&#13;&#10;&#13;&#10;# Account type: 'personal' for Microsoft personal accounts, 'organizational' for Azure AD accounts&#13;&#10;ACCOUNT_TYPE=personal&#13;&#10;&#13;&#10;# Optional: Specific user email if needed&#13;&#10;USER_EMAIL=dlnivas@hotmail.com&#13;&#10;&#13;&#10;# Default OneNote Settings (leave empty to be prompted)&#13;&#10;DEFAULT_NOTEBOOK=&#13;&#10;DEFAULT_SECTION=&#13;&#10;DEFAULT_PAGE=&#13;&#10;&#13;&#10;# Token persistence (for hot state)&#13;&#10;TOKEN_CACHE_FILE=.token_cache.json" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/create_pages_with_images.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/create_pages_with_images.py" />
              <option name="originalContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;OneNote Single Page Creator with Image Support&#10;Usage: python create_pages_with_images.py&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;from onenote_automation import OneNoteAutomation&#10;&#10;def create_single_page_with_image():&#10;    &quot;&quot;&quot;Interactive script to create a single OneNote page with image&quot;&quot;&quot;&#10;    onenote = OneNoteAutomation()&#10;&#10;    # Authenticate&#10;    print(&quot; Authenticating with Microsoft Graph...&quot;)&#10;    if not onenote.authenticate():&#10;        print(&quot;❌ Authentication failed. Please check your credentials in .env file.&quot;)&#10;        return&#10;&#10;    print(&quot;✅ Authentication successful!\n&quot;)&#10;&#10;    # Get notebooks&#10;    print(&quot; Available notebooks:&quot;)&#10;    notebooks = onenote.get_notebooks()&#10;&#10;    if not notebooks:&#10;        print(&quot;❌ No notebooks found.&quot;)&#10;        return&#10;&#10;    # Select notebook&#10;    while True:&#10;        notebook_name = input(&quot;\n Enter notebook name (or type 'list' to see all): &quot;).strip()&#10;        if notebook_name.lower() == 'list':&#10;            for nb in notebooks:&#10;                print(f&quot;  - {nb['displayName']}&quot;)&#10;            continue&#10;&#10;        notebook = onenote.find_notebook_by_name(notebook_name)&#10;        if notebook:&#10;            break&#10;        print(f&quot;❌ Notebook '{notebook_name}' not found. Please try again.&quot;)&#10;&#10;    # Get sections&#10;    print(f&quot;\n Available sections in '{notebook['displayName']}':&quot;)&#10;    sections = onenote.get_sections(notebook['id'])&#10;&#10;    if not sections:&#10;        print(&quot;❌ No sections found in this notebook.&quot;)&#10;        return&#10;&#10;    # Select section&#10;    while True:&#10;        section_name = input(&quot;\n Enter section name (or type 'list' to see all): &quot;).strip()&#10;        if section_name.lower() == 'list':&#10;            for section in sections:&#10;                print(f&quot;  - {section['displayName']}&quot;)&#10;            continue&#10;&#10;        section = onenote.find_section_by_name(notebook['id'], section_name)&#10;        if section:&#10;            break&#10;        print(f&quot;❌ Section '{section_name}' not found. Please try again.&quot;)&#10;&#10;    # Get page details&#10;    page_title = input(&quot;\n Enter page title: &quot;).strip()&#10;    if not page_title:&#10;        print(&quot;❌ Page title cannot be empty.&quot;)&#10;        return&#10;&#10;    page_content = input(&quot; Enter page content (optional): &quot;).strip()&#10;&#10;    # Image options&#10;    print(&quot;\n️ Image Options:&quot;)&#10;    print(&quot;1. Add local image file&quot;)&#10;    print(&quot;2. Add remote image URL&quot;)&#10;    print(&quot;3. Create page without image&quot;)&#10;&#10;    choice = input(&quot;\nSelect an option (1-3): &quot;).strip()&#10;&#10;    if choice == '1':&#10;        # Local image&#10;        image_path = input(&quot;️ Enter path to image file: &quot;).strip()&#10;&#10;        # Validate image file&#10;        if not onenote.validate_image_file(image_path):&#10;            return&#10;&#10;        print(f&quot;\n Creating page '{page_title}' with local image...&quot;)&#10;        result = onenote.create_page_with_image(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            image_path=image_path,&#10;            page_content=page_content&#10;        )&#10;&#10;    elif choice == '2':&#10;        # Remote image&#10;        image_url = input(&quot; Enter image URL: &quot;).strip()&#10;        if not image_url:&#10;            print(&quot;❌ Image URL cannot be empty.&quot;)&#10;            return&#10;&#10;        print(f&quot;\n Creating page '{page_title}' with remote image...&quot;)&#10;        result = onenote.create_page_with_image(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            image_url=image_url,&#10;            page_content=page_content&#10;        )&#10;&#10;    elif choice == '3':&#10;        # No image&#10;        print(f&quot;\n Creating page '{page_title}' without image...&quot;)&#10;        result = onenote.create_page(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            page_content=page_content&#10;        )&#10;&#10;    else:&#10;        print(&quot;❌ Invalid choice.&quot;)&#10;        return&#10;&#10;    if result:&#10;        print(&quot;\n✅ Page created successfully!&quot;)&#10;        # Display page details&#10;        if 'id' in result:&#10;            print(f&quot; Page ID: {result['id']}&quot;)&#10;        if 'links' in result and 'oneNoteWebUrl' in result['links']:&#10;            web_url = result['links']['oneNoteWebUrl'].get('href')&#10;            if web_url:&#10;                print(f&quot; Page URL: {web_url}&quot;)&#10;    else:&#10;        print(&quot;\n❌ Failed to create page.&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;️ OneNote Single Page Creator with Image&quot;)&#10;    print(&quot;=&quot; * 45)&#10;&#10;    # Show supported image formats&#10;    onenote_temp = OneNoteAutomation()&#10;    print(f&quot; Supported image formats: {', '.join(onenote_temp.get_supported_image_formats())}&quot;)&#10;    print()&#10;&#10;    create_single_page_with_image()&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;OneNote Single Page Creator with Image Support&#10;Usage: python create_pages_with_images.py&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;from onenote_automation import OneNoteAutomation&#10;&#10;def create_single_page_with_image():&#10;    &quot;&quot;&quot;Interactive script to create a single OneNote page with image&quot;&quot;&quot;&#10;    onenote = OneNoteAutomation()&#10;&#10;    # Authenticate&#10;    print(&quot; Authenticating with Microsoft Graph...&quot;)&#10;    if not onenote.authenticate():&#10;        print(&quot;❌ Authentication failed. Please check your credentials in .env file.&quot;)&#10;        return&#10;&#10;    print(&quot;✅ Authentication successful!\n&quot;)&#10;&#10;    # Get notebooks&#10;    print(&quot; Available notebooks:&quot;)&#10;    notebooks = onenote.get_notebooks()&#10;&#10;    if not notebooks:&#10;        print(&quot;❌ No notebooks found.&quot;)&#10;        return&#10;&#10;    # Select notebook&#10;    while True:&#10;        notebook_name = input(&quot;\n Enter notebook name (or type 'list' to see all): &quot;).strip()&#10;        if notebook_name.lower() == 'list':&#10;            for nb in notebooks:&#10;                print(f&quot;  - {nb['displayName']}&quot;)&#10;            continue&#10;&#10;        notebook = onenote.find_notebook_by_name(notebook_name)&#10;        if notebook:&#10;            break&#10;        print(f&quot;❌ Notebook '{notebook_name}' not found. Please try again.&quot;)&#10;&#10;    # Get sections&#10;    print(f&quot;\n Available sections in '{notebook['displayName']}':&quot;)&#10;    sections = onenote.get_sections(notebook['id'])&#10;&#10;    if not sections:&#10;        print(&quot;❌ No sections found in this notebook.&quot;)&#10;        return&#10;&#10;    # Select section&#10;    while True:&#10;        section_name = input(&quot;\n Enter section name (or type 'list' to see all): &quot;).strip()&#10;        if section_name.lower() == 'list':&#10;            for section in sections:&#10;                print(f&quot;  - {section['displayName']}&quot;)&#10;            continue&#10;&#10;        section = onenote.find_section_by_name(notebook['id'], section_name)&#10;        if section:&#10;            break&#10;        print(f&quot;❌ Section '{section_name}' not found. Please try again.&quot;)&#10;&#10;    # Get page details&#10;    page_title = input(&quot;\n Enter page title: &quot;).strip()&#10;    if not page_title:&#10;        print(&quot;❌ Page title cannot be empty.&quot;)&#10;        return&#10;&#10;    page_content = input(&quot; Enter page content (optional): &quot;).strip()&#10;&#10;    # Image options&#10;    print(&quot;\n️ Image Options:&quot;)&#10;    print(&quot;1. Add local image file&quot;)&#10;    print(&quot;2. Add remote image URL&quot;)&#10;    print(&quot;3. Paste image from clipboard&quot;)&#10;    print(&quot;4. Create page without image&quot;)&#10;    &#10;    choice = input(&quot;\nSelect an option (1-4): &quot;).strip()&#10;    &#10;    if choice == '1':&#10;        # Local image&#10;        image_path = input(&quot;️ Enter path to image file: &quot;).strip()&#10;        &#10;        # Validate image file&#10;        if not onenote.validate_image_file(image_path):&#10;            return&#10;        &#10;        print(f&quot;\n Creating page '{page_title}' with local image...&quot;)&#10;        result = onenote.create_page_with_image(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            image_path=image_path,&#10;            page_content=page_content&#10;        )&#10;        &#10;    elif choice == '2':&#10;        # Remote image&#10;        image_url = input(&quot; Enter image URL: &quot;).strip()&#10;        if not image_url:&#10;            print(&quot;❌ Image URL cannot be empty.&quot;)&#10;            return&#10;        &#10;        print(f&quot;\n Creating page '{page_title}' with remote image...&quot;)&#10;        result = onenote.create_page_with_image(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            image_url=image_url,&#10;            page_content=page_content&#10;        )&#10;        &#10;    elif choice == '3':&#10;        # Clipboard image&#10;        print(&quot;\n Checking clipboard for image...&quot;)&#10;        has_image, message = onenote.check_clipboard_for_image()&#10;        &#10;        if not has_image:&#10;            print(f&quot;❌ {message}&quot;)&#10;            print(&quot;\n Tips for using clipboard images:&quot;)&#10;            print(&quot;   1. Take a screenshot (Windows Key + Shift + S)&quot;)&#10;            print(&quot;   2. Copy an image from a website (right-click → Copy image)&quot;)&#10;            print(&quot;   3. Copy an image from an image editor&quot;)&#10;            return&#10;        &#10;        print(f&quot;✅ {message}&quot;)&#10;        print(f&quot;\n Creating page '{page_title}' with clipboard image...&quot;)&#10;        result = onenote.create_page_with_clipboard_image(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            page_content=page_content&#10;        )&#10;        &#10;    elif choice == '4':&#10;        # No image&#10;        print(f&quot;\n Creating page '{page_title}' without image...&quot;)&#10;        result = onenote.create_page(&#10;            section_id=section['id'],&#10;            page_title=page_title,&#10;            page_content=page_content&#10;        )&#10;        &#10;    else:&#10;        print(&quot;❌ Invalid choice.&quot;)&#10;        return&#10;&#10;    if result:&#10;        print(&quot;\n✅ Page created successfully!&quot;)&#10;        # Display page details&#10;        if 'id' in result:&#10;            print(f&quot; Page ID: {result['id']}&quot;)&#10;        if 'links' in result and 'oneNoteWebUrl' in result['links']:&#10;            web_url = result['links']['oneNoteWebUrl'].get('href')&#10;            if web_url:&#10;                print(f&quot; Page URL: {web_url}&quot;)&#10;    else:&#10;        print(&quot;\n❌ Failed to create page.&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;️ OneNote Single Page Creator with Image&quot;)&#10;    print(&quot;=&quot; * 45)&#10;&#10;    # Show supported image formats&#10;    onenote_temp = OneNoteAutomation()&#10;    print(f&quot; Supported image formats: {', '.join(onenote_temp.get_supported_image_formats())}&quot;)&#10;    print()&#10;&#10;    create_single_page_with_image()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hotkey_inserter.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hotkey_inserter.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&quot;&quot;&quot;&#10;OneNote Hotkey Image Inserter&#10;Keep this running in the background for instant clipboard image insertion&#10;&quot;&quot;&quot;&#10;&#10;import time&#10;import keyboard&#10;from onenote_automation import OneNoteAutomation&#10;&#10;class OneNoteHotkey:&#10;    def __init__(self):&#10;        self.onenote = None&#10;        self.is_running = False&#10;        &#10;    def initialize(self):&#10;        &quot;&quot;&quot;Initialize OneNote automation and authenticate&quot;&quot;&quot;&#10;        print(&quot; Initializing OneNote Hotkey Tool...&quot;)&#10;        &#10;        try:&#10;            self.onenote = OneNoteAutomation()&#10;            &#10;            # Authenticate once at startup&#10;            if not self.onenote.authenticate():&#10;                print(&quot;❌ Failed to authenticate. Please check your credentials.&quot;)&#10;                return False&#10;            &#10;            # Validate default settings&#10;            if not self.onenote.default_notebook:&#10;                print(&quot;⚠️  Warning: No DEFAULT_NOTEBOOK set in .env file&quot;)&#10;                print(&quot;   Please update your .env file with:&quot;)&#10;                print(&quot;   DEFAULT_NOTEBOOK=YourNotebookName&quot;)&#10;                print(&quot;   DEFAULT_SECTION=YourSectionName&quot;) &#10;                print(&quot;   DEFAULT_PAGE=YourPageName&quot;)&#10;                return False&#10;                &#10;            if not self.onenote.default_section:&#10;                print(&quot;⚠️  Warning: No DEFAULT_SECTION set in .env file&quot;)&#10;                return False&#10;                &#10;            if not self.onenote.default_page:&#10;                print(&quot;⚠️  Warning: No DEFAULT_PAGE set in .env file&quot;)&#10;                return False&#10;            &#10;            print(&quot;✅ OneNote Hotkey Tool initialized successfully!&quot;)&#10;            print(f&quot; Target: {self.onenote.default_notebook} &gt; {self.onenote.default_section} &gt; {self.onenote.default_page}&quot;)&#10;            print(&quot;\n HOT STATE ACTIVE!&quot;)&#10;            print(&quot; Press Ctrl+Shift+V to insert clipboard image&quot;)&#10;            print(&quot; Press Ctrl+C to exit&quot;)&#10;            &#10;            return True&#10;            &#10;        except Exception as e:&#10;            print(f&quot;❌ Initialization error: {str(e)}&quot;)&#10;            return False&#10;    &#10;    def on_hotkey_pressed(self):&#10;        &quot;&quot;&quot;Handle hotkey press event&quot;&quot;&quot;&#10;        print(&quot;\n⚡ Hotkey pressed! Adding clipboard image...&quot;)&#10;        &#10;        try:&#10;            success = self.onenote.quick_add_clipboard_image()&#10;            if success:&#10;                print(&quot; Image added successfully!&quot;)&#10;            else:&#10;                print(&quot; Failed to add image&quot;)&#10;        except Exception as e:&#10;            print(f&quot;❌ Error adding image: {str(e)}&quot;)&#10;            &#10;        print(&quot; Ready for next image...&quot;)&#10;    &#10;    def run(self):&#10;        &quot;&quot;&quot;Start the hotkey listener&quot;&quot;&quot;&#10;        if not self.initialize():&#10;            return&#10;        &#10;        # Register hotkey (Ctrl+Shift+V)&#10;        keyboard.add_hotkey('ctrl+shift+v', self.on_hotkey_pressed)&#10;        &#10;        self.is_running = True&#10;        &#10;        try:&#10;            print(&quot;\n&quot; + &quot;=&quot;*50)&#10;            print(&quot; READY! Use Ctrl+Shift+V to insert images&quot;)&#10;            print(&quot;=&quot;*50)&#10;            &#10;            # Keep the script running&#10;            while self.is_running:&#10;                time.sleep(0.1)&#10;                &#10;        except KeyboardInterrupt:&#10;            print(&quot;\n\n Exiting OneNote Hotkey Tool...&quot;)&#10;            self.is_running = False&#10;&#10;def main():&#10;    &quot;&quot;&quot;Main entry point&quot;&quot;&quot;&#10;    hotkey_tool = OneNoteHotkey()&#10;    hotkey_tool.run()&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/onenote_automation.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/onenote_automation.py" />
              <option name="originalContent" value="import os&#10;import requests&#10;import json&#10;import webbrowser&#10;import urllib.parse&#10;import base64&#10;import mimetypes&#10;import io&#10;import tempfile&#10;from msal import PublicClientApplication, SerializableTokenCache&#10;from dotenv import load_dotenv&#10;&#10;try:&#10;    from PIL import ImageGrab, Image&#10;    PIL_AVAILABLE = True&#10;except ImportError:&#10;    PIL_AVAILABLE = False&#10;&#10;class OneNoteAutomation:&#10;    def __init__(self):&#10;        load_dotenv()&#10;        self.client_id = os.getenv('CLIENT_ID')&#10;        self.tenant_id = os.getenv('TENANT_ID', 'common')&#10;        self.account_type = os.getenv('ACCOUNT_TYPE', 'personal')&#10;        self.user_email = os.getenv('USER_EMAIL')&#10;&#10;        # Default settings from .env&#10;        self.default_notebook = os.getenv('DEFAULT_NOTEBOOK', '').strip()&#10;        self.default_section = os.getenv('DEFAULT_SECTION', '').strip()&#10;        self.default_page = os.getenv('DEFAULT_PAGE', '').strip()&#10;        self.token_cache_file = os.getenv('TOKEN_CACHE_FILE', '.token_cache.json')&#10;&#10;        if not self.client_id:&#10;            raise ValueError(&quot;Missing CLIENT_ID in environment variables. Please check your .env file.&quot;)&#10;&#10;        # For personal accounts, use common endpoint&#10;        if self.account_type == 'personal':&#10;            self.authority = &quot;https://login.microsoftonline.com/common&quot;&#10;            self.scope = [&#10;                &quot;https://graph.microsoft.com/Notes.ReadWrite&quot;,&#10;                &quot;https://graph.microsoft.com/Notes.Read&quot;&#10;            ]&#10;        else:&#10;            self.authority = f&quot;https://login.microsoftonline.com/{self.tenant_id}&quot;&#10;            self.scope = [&quot;https://graph.microsoft.com/.default&quot;]&#10;&#10;        self.graph_url = &quot;https://graph.microsoft.com/v1.0&quot;&#10;&#10;        # Initialize token cache&#10;        self.cache = SerializableTokenCache()&#10;        if os.path.exists(self.token_cache_file):&#10;            with open(self.token_cache_file, 'r') as f:&#10;                self.cache.deserialize(f.read())&#10;&#10;        # Use PublicClientApplication with token cache&#10;        self.app = PublicClientApplication(&#10;            client_id=self.client_id,&#10;            authority=self.authority,&#10;            token_cache=self.cache&#10;        )&#10;&#10;        self.access_token = None&#10;        self.account = None&#10;&#10;        # Cache for default objects&#10;        self._cached_notebook = None&#10;        self._cached_section = None&#10;        self._cached_page = None&#10;&#10;    def _save_token_cache(self):&#10;        &quot;&quot;&quot;Save token cache to file for persistence&quot;&quot;&quot;&#10;        if self.cache.has_state_changed:&#10;            with open(self.token_cache_file, 'w') as f:&#10;                f.write(self.cache.serialize())&#10;&#10;    def authenticate(self, force_reauth=False):&#10;        &quot;&quot;&quot;Authenticate with persistent token caching&quot;&quot;&quot;&#10;        try:&#10;            # Try to get token silently first (if user has authenticated before)&#10;            accounts = self.app.get_accounts()&#10;            if accounts and not force_reauth:&#10;                print(&quot; Using cached authentication...&quot;)&#10;                result = self.app.acquire_token_silent(self.scope, account=accounts[0])&#10;                if result and &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    self.account = accounts[0]&#10;                    self._save_token_cache()&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;&#10;            # If silent auth fails, use interactive browser flow&#10;            print(&quot; Starting authentication...&quot;)&#10;            print(&quot;This will open a browser window for authentication.&quot;)&#10;&#10;            try:&#10;                result = self.app.acquire_token_interactive(&#10;                    scopes=self.scope,&#10;                    prompt=&quot;select_account&quot;&#10;                )&#10;&#10;                if &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    self.account = result.get(&quot;account&quot;)&#10;                    self._save_token_cache()&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;                else:&#10;                    print(f&quot;❌ Interactive authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#10;&#10;            except Exception as interactive_error:&#10;                print(f&quot;Interactive flow failed: {str(interactive_error)}&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Authentication error: {str(e)}&quot;)&#10;            return False&#10;&#10;    def get_headers(self):&#10;        &quot;&quot;&quot;Get headers for API requests&quot;&quot;&quot;&#10;        if not self.access_token:&#10;            raise ValueError(&quot;Not authenticated. Call authenticate() first.&quot;)&#10;&#10;        return {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': 'application/json'&#10;        }&#10;&#10;    def get_notebooks(self):&#10;        &quot;&quot;&quot;Get all notebooks for the authenticated user&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks&quot;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            notebooks = response.json().get('value', [])&#10;            print(f&quot; Found {len(notebooks)} notebooks:&quot;)&#10;            for nb in notebooks:&#10;                print(f&quot;   {nb['displayName']} (ID: {nb['id']})&quot;)&#10;&#10;            return notebooks&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting notebooks: {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return []&#10;&#10;    def get_sections(self, notebook_id):&#10;        &quot;&quot;&quot;Get all sections in a notebook&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks/{notebook_id}/sections&quot;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            sections = response.json().get('value', [])&#10;            print(f&quot; Found {len(sections)} sections:&quot;)&#10;            for section in sections:&#10;                print(f&quot;   {section['displayName']} (ID: {section['id']})&quot;)&#10;&#10;            return sections&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting sections: {str(e)}&quot;)&#10;            return []&#10;&#10;    def create_page(self, section_id, page_title, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page in a specific section&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;&#10;            # Escape HTML characters in title to preserve exact formatting&#10;            import html&#10;            escaped_title = html.escape(page_title)&#10;&#10;            # Create HTML content for the page with preserved formatting&#10;            html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{escaped_title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{escaped_title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{page_content}&lt;/p&gt;' if page_content else ''}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;&#10;            headers = self.get_headers()&#10;            headers['Content-Type'] = 'text/html'&#10;&#10;            response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#10;            response.raise_for_status()&#10;&#10;            page_data = response.json()&#10;            print(f&quot;✅ Page '{page_title}' created successfully!&quot;)&#10;            print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#10;&#10;            # Try to get the web URL&#10;            web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#10;            if web_url:&#10;                print(f&quot;    Page URL: {web_url}&quot;)&#10;&#10;            return page_data&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error creating page '{page_title}': {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return None&#10;&#10;    def create_page_with_image(self, section_id, page_title, image_path=None, image_url=None, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page with an embedded image&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;&#10;            # Escape HTML characters in title to preserve exact formatting&#10;            import html&#10;            escaped_title = html.escape(page_title)&#10;&#10;            # Create HTML content with image&#10;            if image_path and os.path.exists(image_path):&#10;                # Local image file&#10;                html_content = self._create_html_with_local_image(escaped_title, image_path, page_content)&#10;                return self._create_page_multipart(url, html_content, image_path)&#10;&#10;            elif image_url:&#10;                # Remote image URL&#10;                html_content = self._create_html_with_remote_image(escaped_title, image_url, page_content)&#10;&#10;                headers = self.get_headers()&#10;                headers['Content-Type'] = 'text/html'&#10;&#10;                response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#10;                response.raise_for_status()&#10;&#10;                page_data = response.json()&#10;                print(f&quot;✅ Page '{page_title}' with image created successfully!&quot;)&#10;                return page_data&#10;            else:&#10;                print(&quot;❌ No valid image path or URL provided&quot;)&#10;                return None&#10;&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error creating page with image '{page_title}': {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return None&#10;&#10;    def create_page_with_clipboard_image(self, section_id, page_title, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page with an image from clipboard&quot;&quot;&quot;&#10;        if not PIL_AVAILABLE:&#10;            print(&quot;❌ PIL (Pillow) library not installed. Please install it with: pip install Pillow&quot;)&#10;            return None&#10;&#10;        try:&#10;            # Get image from clipboard&#10;            clipboard_image = ImageGrab.grabclipboard()&#10;&#10;            if clipboard_image is None:&#10;                print(&quot;❌ No image found in clipboard. Please copy an image first.&quot;)&#10;                return None&#10;&#10;            if not isinstance(clipboard_image, Image.Image):&#10;                print(&quot;❌ Clipboard content is not an image.&quot;)&#10;                return None&#10;&#10;            print(&quot;✅ Image found in clipboard!&quot;)&#10;            print(f&quot;    Size: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels&quot;)&#10;            print(f&quot;    Mode: {clipboard_image.mode}&quot;)&#10;&#10;            # Save clipboard image to temporary file&#10;            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)&#10;            temp_path = temp_file.name&#10;            temp_file.close()&#10;&#10;            # Convert to RGB if necessary (for PNG compatibility)&#10;            if clipboard_image.mode in ('RGBA', 'LA'):&#10;                # Create white background for transparent images&#10;                background = Image.new('RGB', clipboard_image.size, (255, 255, 255))&#10;                if clipboard_image.mode == 'RGBA':&#10;                    background.paste(clipboard_image, mask=clipboard_image.split()[-1])&#10;                else:&#10;                    background.paste(clipboard_image)&#10;                clipboard_image = background&#10;            elif clipboard_image.mode != 'RGB':&#10;                clipboard_image = clipboard_image.convert('RGB')&#10;&#10;            # Save as PNG&#10;            clipboard_image.save(temp_path, 'PNG', optimize=True)&#10;&#10;            print(f&quot; Saved clipboard image to temporary file: {temp_path}&quot;)&#10;&#10;            # Create page with the temporary image&#10;            result = self.create_page_with_image(&#10;                section_id=section_id,&#10;                page_title=page_title,&#10;                image_path=temp_path,&#10;                page_content=page_content&#10;            )&#10;&#10;            # Clean up temporary file&#10;            try:&#10;                os.unlink(temp_path)&#10;                print(&quot;️ Cleaned up temporary file&quot;)&#10;            except:&#10;                pass  # Ignore cleanup errors&#10;&#10;            return result&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Error creating page with clipboard image: {str(e)}&quot;)&#10;            return None&#10;&#10;    def check_clipboard_for_image(self):&#10;        &quot;&quot;&quot;Check if clipboard contains an image&quot;&quot;&quot;&#10;        if not PIL_AVAILABLE:&#10;            return False, &quot;PIL (Pillow) library not installed&quot;&#10;&#10;        try:&#10;            clipboard_image = ImageGrab.grabclipboard()&#10;            if clipboard_image is None:&#10;                return False, &quot;No content in clipboard&quot;&#10;&#10;            if not isinstance(clipboard_image, Image.Image):&#10;                return False, &quot;Clipboard content is not an image&quot;&#10;&#10;            return True, f&quot;Image found: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels, {clipboard_image.mode} mode&quot;&#10;&#10;        except Exception as e:&#10;            return False, f&quot;Error checking clipboard: {str(e)}&quot;&#10;&#10;    def _create_html_with_local_image(self, title, image_path, content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create HTML content with local image reference&quot;&quot;&quot;&#10;        filename = os.path.basename(image_path)&#10;&#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#10;    &lt;img src=&quot;name:{filename}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;        return html_content&#10;&#10;    def _create_html_with_remote_image(self, title, image_url, content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create HTML content with remote image URL&quot;&quot;&quot;&#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#10;    &lt;img src=&quot;{image_url}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;        return html_content&#10;&#10;    def _create_page_multipart(self, url, html_content, image_path):&#10;        &quot;&quot;&quot;Create a page with multipart request for local image&quot;&quot;&quot;&#10;        import uuid&#10;&#10;        # Generate boundary for multipart request&#10;        boundary = f&quot;Part_{uuid.uuid4().hex}&quot;&#10;&#10;        # Get image content type&#10;        content_type, _ = mimetypes.guess_type(image_path)&#10;        if not content_type:&#10;            content_type = 'application/octet-stream'&#10;&#10;        # Read image file&#10;        with open(image_path, 'rb') as image_file:&#10;            image_data = image_file.read()&#10;&#10;        filename = os.path.basename(image_path)&#10;&#10;        # Create multipart body&#10;        multipart_body = f&quot;&quot;&quot;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;Presentation&quot;\r&#10;Content-Type: text/html\r&#10;\r&#10;{html_content}\r&#10;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;{filename}&quot;\r&#10;Content-Type: {content_type}\r&#10;\r&#10;&quot;&quot;&quot;.encode('utf-8')&#10;&#10;        multipart_body += image_data&#10;        multipart_body += f&quot;\r\n--{boundary}--\r\n&quot;.encode('utf-8')&#10;&#10;        # Set headers for multipart request&#10;        headers = {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': f'multipart/form-data; boundary={boundary}'&#10;        }&#10;&#10;        response = requests.post(url, headers=headers, data=multipart_body)&#10;        response.raise_for_status()&#10;&#10;        page_data = response.json()&#10;        print(f&quot;✅ Page with local image created successfully!&quot;)&#10;        print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#10;&#10;        # Try to get the web URL&#10;        web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#10;        if web_url:&#10;            print(f&quot;    Page URL: {web_url}&quot;)&#10;&#10;        return page_data&#10;&#10;    def find_notebook_by_name(self, notebook_name):&#10;        &quot;&quot;&quot;Find a notebook by name&quot;&quot;&quot;&#10;        notebooks = self.get_notebooks()&#10;        for notebook in notebooks:&#10;            if notebook['displayName'].lower() == notebook_name.lower():&#10;                return notebook&#10;        return None&#10;&#10;    def find_section_by_name(self, notebook_id, section_name):&#10;        &quot;&quot;&quot;Find a section by name within a notebook&quot;&quot;&quot;&#10;        sections = self.get_sections(notebook_id)&#10;        for section in sections:&#10;            if section['displayName'].lower() == section_name.lower():&#10;                return section&#10;        return None&#10;&#10;    def get_supported_image_formats(self):&#10;        &quot;&quot;&quot;Get list of supported image formats&quot;&quot;&quot;&#10;        return ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg']&#10;&#10;    def validate_image_file(self, image_path):&#10;        &quot;&quot;&quot;Validate if the image file is supported and exists&quot;&quot;&quot;&#10;        if not os.path.exists(image_path):&#10;            print(f&quot;❌ Image file not found: {image_path}&quot;)&#10;            return False&#10;&#10;        _, ext = os.path.splitext(image_path.lower())&#10;        if ext not in self.get_supported_image_formats():&#10;            print(f&quot;❌ Unsupported image format: {ext}&quot;)&#10;            print(f&quot;Supported formats: {', '.join(self.get_supported_image_formats())}&quot;)&#10;            return False&#10;&#10;        # Check file size (OneNote has a 100MB limit per attachment)&#10;        file_size = os.path.getsize(image_path)&#10;        max_size = 100 * 1024 * 1024  # 100MB in bytes&#10;        if file_size &gt; max_size:&#10;            print(f&quot;❌ Image file too large: {file_size / (1024*1024):.2f}MB (max: 100MB)&quot;)&#10;            return False&#10;&#10;        print(f&quot;✅ Image file validated: {image_path} ({file_size / 1024:.2f}KB)&quot;)&#10;        return True&#10;&#10;    def _get_current_datetime(self):&#10;        &quot;&quot;&quot;Get current datetime in ISO format&quot;&quot;&quot;&#10;        from datetime import datetime&#10;        return datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#10;&#10;    def get_or_create_default_page(self):&#10;        &quot;&quot;&quot;Get or create the default page based on .env settings&quot;&quot;&quot;&#10;        try:&#10;            # Get default notebook&#10;            if not self._cached_notebook:&#10;                if self.default_notebook:&#10;                    self._cached_notebook = self.find_notebook_by_name(self.default_notebook)&#10;                    if not self._cached_notebook:&#10;                        print(f&quot;❌ Default notebook '{self.default_notebook}' not found.&quot;)&#10;                        return None&#10;                else:&#10;                    print(&quot; No default notebook specified. Please set DEFAULT_NOTEBOOK in .env file.&quot;)&#10;                    return None&#10;&#10;            # Get default section&#10;            if not self._cached_section:&#10;                if self.default_section:&#10;                    self._cached_section = self.find_section_by_name(self._cached_notebook['id'], self.default_section)&#10;                    if not self._cached_section:&#10;                        print(f&quot;❌ Default section '{self.default_section}' not found.&quot;)&#10;                        return None&#10;                else:&#10;                    print(&quot; No default section specified. Please set DEFAULT_SECTION in .env file.&quot;)&#10;                    return None&#10;&#10;            # Get or create default page&#10;            if not self._cached_page:&#10;                if self.default_page:&#10;                    self._cached_page = self.find_page_by_name(self._cached_section['id'], self.default_page)&#10;                    if not self._cached_page:&#10;                        print(f&quot; Creating new page '{self.default_page}'...&quot;)&#10;                        self._cached_page = self.create_page(self._cached_section['id'], self.default_page, &quot;&quot;)&#10;                    else:&#10;                        print(f&quot; Using existing page '{self.default_page}'&quot;)&#10;                else:&#10;                    print(&quot; No default page specified. Please set DEFAULT_PAGE in .env file.&quot;)&#10;                    return None&#10;&#10;            return self._cached_page&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Error getting/creating default page: {str(e)}&quot;)&#10;            return None&#10;&#10;    def find_page_by_name(self, section_id, page_name):&#10;        &quot;&quot;&quot;Find a page by name within a section&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            pages = response.json().get('value', [])&#10;            for page in pages:&#10;                if page['title'].lower() == page_name.lower():&#10;                    return page&#10;            return None&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error finding page: {str(e)}&quot;)&#10;            return None&#10;&#10;    def add_image_to_page(self, page_id, image_path=None, image_url=None):&#10;        &quot;&quot;&quot;Add an image to an existing OneNote page&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/pages/{page_id}/content&quot;&#10;&#10;            if image_path and os.path.exists(image_path):&#10;                return self._add_local_image_to_page(url, image_path)&#10;            elif image_url:&#10;                return self._add_remote_image_to_page(url, image_url)&#10;            else:&#10;                print(&quot;❌ No valid image path or URL provided&quot;)&#10;                return False&#10;&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error adding image to page: {str(e)}&quot;)&#10;            return False&#10;&#10;    def _add_local_image_to_page(self, url, image_path):&#10;        &quot;&quot;&quot;Add a local image to an existing page using PATCH request&quot;&quot;&quot;&#10;        import uuid&#10;&#10;        boundary = f&quot;Part_{uuid.uuid4().hex}&quot;&#10;        content_type, _ = mimetypes.guess_type(image_path)&#10;        if not content_type:&#10;            content_type = 'application/octet-stream'&#10;&#10;        with open(image_path, 'rb') as image_file:&#10;            image_data = image_file.read()&#10;&#10;        filename = os.path.basename(image_path)&#10;&#10;        # Create patch content to append image without line breaks&#10;        patch_content = f&quot;&quot;&quot;[{{&#10;    &quot;target&quot;: &quot;body&quot;,&#10;    &quot;action&quot;: &quot;append&quot;,&#10;    &quot;content&quot;: &quot;&lt;img src=\\&quot;name:{filename}\\&quot; alt=\\&quot;{filename}\\&quot; style=\\&quot;max-width: 100%; height: auto;\\&quot; /&gt;&quot;&#10;}}]&quot;&quot;&quot;&#10;&#10;        # Create multipart body&#10;        multipart_body = f&quot;&quot;&quot;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;Commands&quot;\r&#10;Content-Type: application/json\r&#10;\r&#10;{patch_content}\r&#10;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;{filename}&quot;\r&#10;Content-Type: {content_type}\r&#10;\r&#10;&quot;&quot;&quot;.encode('utf-8')&#10;&#10;        multipart_body += image_data&#10;        multipart_body += f&quot;\r\n--{boundary}--\r\n&quot;.encode('utf-8')&#10;&#10;        headers = {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': f'multipart/form-data; boundary={boundary}'&#10;        }&#10;&#10;        response = requests.patch(url, headers=headers, data=multipart_body)&#10;        response.raise_for_status()&#10;&#10;        print(f&quot;✅ Image '{filename}' added to page successfully!&quot;)&#10;        return True&#10;&#10;    def _add_remote_image_to_page(self, url, image_url):&#10;        &quot;&quot;&quot;Add a remote image to an existing page using PATCH request&quot;&quot;&quot;&#10;        patch_content = [{&#10;            &quot;target&quot;: &quot;body&quot;,&#10;            &quot;action&quot;: &quot;append&quot;,&#10;            &quot;content&quot;: f'&lt;img src=&quot;{image_url}&quot; alt=&quot;Remote Image&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;'&#10;        }]&#10;&#10;        headers = self.get_headers()&#10;        response = requests.patch(url, headers=headers, json=patch_content)&#10;        response.raise_for_status()&#10;&#10;        print(f&quot;✅ Remote image added to page successfully!&quot;)&#10;        return True&#10;&#10;    def quick_add_clipboard_image(self):&#10;        &quot;&quot;&quot;Quick add clipboard image to default page - main hotkey function&quot;&quot;&quot;&#10;        if not PIL_AVAILABLE:&#10;            print(&quot;❌ PIL (Pillow) library not installed. Please install it with: pip install Pillow&quot;)&#10;            return False&#10;&#10;        # Ensure authentication&#10;        if not self.access_token:&#10;            if not self.authenticate():&#10;                print(&quot;❌ Authentication failed&quot;)&#10;                return False&#10;&#10;        # Get clipboard image&#10;        try:&#10;            clipboard_image = ImageGrab.grabclipboard()&#10;&#10;            if clipboard_image is None:&#10;                print(&quot;❌ No image found in clipboard&quot;)&#10;                return False&#10;&#10;            if not isinstance(clipboard_image, Image.Image):&#10;                print(&quot;❌ Clipboard content is not an image&quot;)&#10;                return False&#10;&#10;            print(f&quot; Image found: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels&quot;)&#10;&#10;            # Get or create default page&#10;            page = self.get_or_create_default_page()&#10;            if not page:&#10;                print(&quot;❌ Could not get/create default page&quot;)&#10;                return False&#10;&#10;            # Save clipboard image to temporary file&#10;            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)&#10;            temp_path = temp_file.name&#10;            temp_file.close()&#10;&#10;            # Convert image if necessary&#10;            if clipboard_image.mode in ('RGBA', 'LA'):&#10;                background = Image.new('RGB', clipboard_image.size, (255, 255, 255))&#10;                if clipboard_image.mode == 'RGBA':&#10;                    background.paste(clipboard_image, mask=clipboard_image.split()[-1])&#10;                else:&#10;                    background.paste(clipboard_image)&#10;                clipboard_image = background&#10;            elif clipboard_image.mode != 'RGB':&#10;                clipboard_image = clipboard_image.convert('RGB')&#10;&#10;            clipboard_image.save(temp_path, 'PNG', optimize=True)&#10;&#10;            # Add image to page&#10;            result = self.add_image_to_page(page['id'], image_path=temp_path)&#10;&#10;            # Clean up&#10;            try:&#10;                os.unlink(temp_path)&#10;            except:&#10;                pass&#10;&#10;            if result:&#10;                print(f&quot;✅ Image added to page '{page['title']}' successfully!&quot;)&#10;                return True&#10;            else:&#10;                print(&quot;❌ Failed to add image to page&quot;)&#10;                return False&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Error: {str(e)}&quot;)&#10;            return False&#10;&#10;" />
              <option name="updatedContent" value="import os&#13;&#10;import requests&#13;&#10;import json&#13;&#10;import webbrowser&#13;&#10;import urllib.parse&#13;&#10;import base64&#13;&#10;import mimetypes&#13;&#10;import io&#13;&#10;import tempfile&#13;&#10;from msal import PublicClientApplication, SerializableTokenCache&#13;&#10;from dotenv import load_dotenv&#13;&#10;&#13;&#10;try:&#13;&#10;    from PIL import ImageGrab, Image&#13;&#10;    PIL_AVAILABLE = True&#13;&#10;except ImportError:&#13;&#10;    PIL_AVAILABLE = False&#13;&#10;&#13;&#10;class OneNoteAutomation:&#13;&#10;    def __init__(self):&#13;&#10;        load_dotenv()&#13;&#10;        self.client_id = os.getenv('CLIENT_ID')&#13;&#10;        self.tenant_id = os.getenv('TENANT_ID', 'common')&#13;&#10;        self.account_type = os.getenv('ACCOUNT_TYPE', 'personal')&#13;&#10;        self.user_email = os.getenv('USER_EMAIL')&#13;&#10;&#13;&#10;        # Default settings from .env&#13;&#10;        self.default_notebook = os.getenv('DEFAULT_NOTEBOOK', '').strip()&#13;&#10;        self.default_section = os.getenv('DEFAULT_SECTION', '').strip()&#13;&#10;        self.default_page = os.getenv('DEFAULT_PAGE', '').strip()&#13;&#10;        self.token_cache_file = os.getenv('TOKEN_CACHE_FILE', '.token_cache.json')&#13;&#10;&#13;&#10;        if not self.client_id:&#13;&#10;            raise ValueError(&quot;Missing CLIENT_ID in environment variables. Please check your .env file.&quot;)&#13;&#10;&#13;&#10;        # For personal accounts, use common endpoint&#13;&#10;        if self.account_type == 'personal':&#13;&#10;            self.authority = &quot;https://login.microsoftonline.com/common&quot;&#13;&#10;            self.scope = [&#13;&#10;                &quot;https://graph.microsoft.com/Notes.ReadWrite&quot;,&#13;&#10;                &quot;https://graph.microsoft.com/Notes.Read&quot;&#13;&#10;            ]&#13;&#10;        else:&#13;&#10;            self.authority = f&quot;https://login.microsoftonline.com/{self.tenant_id}&quot;&#13;&#10;            self.scope = [&quot;https://graph.microsoft.com/.default&quot;]&#13;&#10;&#13;&#10;        self.graph_url = &quot;https://graph.microsoft.com/v1.0&quot;&#13;&#10;&#13;&#10;        # Initialize token cache&#13;&#10;        self.cache = SerializableTokenCache()&#13;&#10;        if os.path.exists(self.token_cache_file):&#13;&#10;            with open(self.token_cache_file, 'r') as f:&#13;&#10;                self.cache.deserialize(f.read())&#13;&#10;&#13;&#10;        # Use PublicClientApplication with token cache&#13;&#10;        self.app = PublicClientApplication(&#13;&#10;            client_id=self.client_id,&#13;&#10;            authority=self.authority,&#13;&#10;            token_cache=self.cache&#13;&#10;        )&#13;&#10;&#13;&#10;        self.access_token = None&#13;&#10;        self.account = None&#13;&#10;&#13;&#10;        # Cache for default objects&#13;&#10;        self._cached_notebook = None&#13;&#10;        self._cached_section = None&#13;&#10;        self._cached_page = None&#13;&#10;&#13;&#10;    def _save_token_cache(self):&#13;&#10;        &quot;&quot;&quot;Save token cache to file for persistence&quot;&quot;&quot;&#13;&#10;        if self.cache.has_state_changed:&#13;&#10;            with open(self.token_cache_file, 'w') as f:&#13;&#10;                f.write(self.cache.serialize())&#13;&#10;&#13;&#10;    def authenticate(self, force_reauth=False):&#13;&#10;        &quot;&quot;&quot;Authenticate with persistent token caching&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            # Try to get token silently first (if user has authenticated before)&#13;&#10;            accounts = self.app.get_accounts()&#13;&#10;            if accounts and not force_reauth:&#13;&#10;                print(&quot; Using cached authentication...&quot;)&#13;&#10;                result = self.app.acquire_token_silent(self.scope, account=accounts[0])&#13;&#10;                if result and &quot;access_token&quot; in result:&#13;&#10;                    self.access_token = result[&quot;access_token&quot;]&#13;&#10;                    self.account = accounts[0]&#13;&#10;                    self._save_token_cache()&#13;&#10;                    print(&quot;✅ Authentication successful!&quot;)&#13;&#10;                    return True&#13;&#10;&#13;&#10;            # If silent auth fails, use interactive browser flow&#13;&#10;            print(&quot; Starting authentication...&quot;)&#13;&#10;            print(&quot;This will open a browser window for authentication.&quot;)&#13;&#10;&#13;&#10;            try:&#13;&#10;                result = self.app.acquire_token_interactive(&#13;&#10;                    scopes=self.scope,&#13;&#10;                    prompt=&quot;select_account&quot;&#13;&#10;                )&#13;&#10;&#13;&#10;                if &quot;access_token&quot; in result:&#13;&#10;                    self.access_token = result[&quot;access_token&quot;]&#13;&#10;                    self.account = result.get(&quot;account&quot;)&#13;&#10;                    self._save_token_cache()&#13;&#10;                    print(&quot;✅ Authentication successful!&quot;)&#13;&#10;                    return True&#13;&#10;                else:&#13;&#10;                    print(f&quot;❌ Interactive authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#13;&#10;&#13;&#10;            except Exception as interactive_error:&#13;&#10;                print(f&quot;Interactive flow failed: {str(interactive_error)}&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            print(f&quot;❌ Authentication error: {str(e)}&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;    def get_headers(self):&#13;&#10;        &quot;&quot;&quot;Get headers for API requests&quot;&quot;&quot;&#13;&#10;        if not self.access_token:&#13;&#10;            raise ValueError(&quot;Not authenticated. Call authenticate() first.&quot;)&#13;&#10;&#13;&#10;        return {&#13;&#10;            'Authorization': f'Bearer {self.access_token}',&#13;&#10;            'Content-Type': 'application/json'&#13;&#10;        }&#13;&#10;&#13;&#10;    def get_notebooks(self):&#13;&#10;        &quot;&quot;&quot;Get all notebooks for the authenticated user&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks&quot;&#13;&#10;            response = requests.get(url, headers=self.get_headers())&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            notebooks = response.json().get('value', [])&#13;&#10;            print(f&quot; Found {len(notebooks)} notebooks:&quot;)&#13;&#10;            for nb in notebooks:&#13;&#10;                print(f&quot;   {nb['displayName']} (ID: {nb['id']})&quot;)&#13;&#10;&#13;&#10;            return notebooks&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error getting notebooks: {str(e)}&quot;)&#13;&#10;            if hasattr(e, 'response') and e.response is not None:&#13;&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#13;&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#13;&#10;            return []&#13;&#10;&#13;&#10;    def get_sections(self, notebook_id):&#13;&#10;        &quot;&quot;&quot;Get all sections in a notebook&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks/{notebook_id}/sections&quot;&#13;&#10;            response = requests.get(url, headers=self.get_headers())&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            sections = response.json().get('value', [])&#13;&#10;            print(f&quot; Found {len(sections)} sections:&quot;)&#13;&#10;            for section in sections:&#13;&#10;                print(f&quot;   {section['displayName']} (ID: {section['id']})&quot;)&#13;&#10;&#13;&#10;            return sections&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error getting sections: {str(e)}&quot;)&#13;&#10;            return []&#13;&#10;&#13;&#10;    def create_page(self, section_id, page_title, page_content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create a new page in a specific section&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#13;&#10;&#13;&#10;            # Escape HTML characters in title to preserve exact formatting&#13;&#10;            import html&#13;&#10;            escaped_title = html.escape(page_title)&#13;&#10;&#13;&#10;            # Create HTML content for the page with preserved formatting&#13;&#10;            html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;title&gt;{escaped_title}&lt;/title&gt;&#13;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    &lt;h1&gt;{escaped_title}&lt;/h1&gt;&#13;&#10;    {f'&lt;p&gt;{page_content}&lt;/p&gt;' if page_content else ''}&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;&quot;&quot;&quot;&#13;&#10;&#13;&#10;            headers = self.get_headers()&#13;&#10;            headers['Content-Type'] = 'text/html'&#13;&#10;&#13;&#10;            response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            page_data = response.json()&#13;&#10;            print(f&quot;✅ Page '{page_title}' created successfully!&quot;)&#13;&#10;            print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#13;&#10;&#13;&#10;            # Try to get the web URL&#13;&#10;            web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#13;&#10;            if web_url:&#13;&#10;                print(f&quot;    Page URL: {web_url}&quot;)&#13;&#10;&#13;&#10;            return page_data&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error creating page '{page_title}': {str(e)}&quot;)&#13;&#10;            if hasattr(e, 'response') and e.response is not None:&#13;&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#13;&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def create_page_with_image(self, section_id, page_title, image_path=None, image_url=None, page_content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create a new page with an embedded image&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#13;&#10;&#13;&#10;            # Escape HTML characters in title to preserve exact formatting&#13;&#10;            import html&#13;&#10;            escaped_title = html.escape(page_title)&#13;&#10;&#13;&#10;            # Create HTML content with image&#13;&#10;            if image_path and os.path.exists(image_path):&#13;&#10;                # Local image file&#13;&#10;                html_content = self._create_html_with_local_image(escaped_title, image_path, page_content)&#13;&#10;                return self._create_page_multipart(url, html_content, image_path)&#13;&#10;&#13;&#10;            elif image_url:&#13;&#10;                # Remote image URL&#13;&#10;                html_content = self._create_html_with_remote_image(escaped_title, image_url, page_content)&#13;&#10;&#13;&#10;                headers = self.get_headers()&#13;&#10;                headers['Content-Type'] = 'text/html'&#13;&#10;&#13;&#10;                response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#13;&#10;                response.raise_for_status()&#13;&#10;&#13;&#10;                page_data = response.json()&#13;&#10;                print(f&quot;✅ Page '{page_title}' with image created successfully!&quot;)&#13;&#10;                return page_data&#13;&#10;            else:&#13;&#10;                print(&quot;❌ No valid image path or URL provided&quot;)&#13;&#10;                return None&#13;&#10;&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error creating page with image '{page_title}': {str(e)}&quot;)&#13;&#10;            if hasattr(e, 'response') and e.response is not None:&#13;&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#13;&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def create_page_with_clipboard_image(self, section_id, page_title, page_content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create a new page with an image from clipboard&quot;&quot;&quot;&#13;&#10;        if not PIL_AVAILABLE:&#13;&#10;            print(&quot;❌ PIL (Pillow) library not installed. Please install it with: pip install Pillow&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;        try:&#13;&#10;            # Get image from clipboard&#13;&#10;            clipboard_image = ImageGrab.grabclipboard()&#13;&#10;&#13;&#10;            if clipboard_image is None:&#13;&#10;                print(&quot;❌ No image found in clipboard. Please copy an image first.&quot;)&#13;&#10;                return None&#13;&#10;&#13;&#10;            if not isinstance(clipboard_image, Image.Image):&#13;&#10;                print(&quot;❌ Clipboard content is not an image.&quot;)&#13;&#10;                return None&#13;&#10;&#13;&#10;            print(&quot;✅ Image found in clipboard!&quot;)&#13;&#10;            print(f&quot;    Size: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels&quot;)&#13;&#10;            print(f&quot;    Mode: {clipboard_image.mode}&quot;)&#13;&#10;&#13;&#10;            # Save clipboard image to temporary file&#13;&#10;            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)&#13;&#10;            temp_path = temp_file.name&#13;&#10;            temp_file.close()&#13;&#10;&#13;&#10;            # Convert to RGB if necessary (for PNG compatibility)&#13;&#10;            if clipboard_image.mode in ('RGBA', 'LA'):&#13;&#10;                # Create white background for transparent images&#13;&#10;                background = Image.new('RGB', clipboard_image.size, (255, 255, 255))&#13;&#10;                if clipboard_image.mode == 'RGBA':&#13;&#10;                    background.paste(clipboard_image, mask=clipboard_image.split()[-1])&#13;&#10;                else:&#13;&#10;                    background.paste(clipboard_image)&#13;&#10;                clipboard_image = background&#13;&#10;            elif clipboard_image.mode != 'RGB':&#13;&#10;                clipboard_image = clipboard_image.convert('RGB')&#13;&#10;&#13;&#10;            # Save as PNG&#13;&#10;            clipboard_image.save(temp_path, 'PNG', optimize=True)&#13;&#10;&#13;&#10;            print(f&quot; Saved clipboard image to temporary file: {temp_path}&quot;)&#13;&#10;&#13;&#10;            # Create page with the temporary image&#13;&#10;            result = self.create_page_with_image(&#13;&#10;                section_id=section_id,&#13;&#10;                page_title=page_title,&#13;&#10;                image_path=temp_path,&#13;&#10;                page_content=page_content&#13;&#10;            )&#13;&#10;&#13;&#10;            # Clean up temporary file&#13;&#10;            try:&#13;&#10;                os.unlink(temp_path)&#13;&#10;                print(&quot;️ Cleaned up temporary file&quot;)&#13;&#10;            except:&#13;&#10;                pass  # Ignore cleanup errors&#13;&#10;&#13;&#10;            return result&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            print(f&quot;❌ Error creating page with clipboard image: {str(e)}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def check_clipboard_for_image(self):&#13;&#10;        &quot;&quot;&quot;Check if clipboard contains an image&quot;&quot;&quot;&#13;&#10;        if not PIL_AVAILABLE:&#13;&#10;            return False, &quot;PIL (Pillow) library not installed&quot;&#13;&#10;&#13;&#10;        try:&#13;&#10;            clipboard_image = ImageGrab.grabclipboard()&#13;&#10;            if clipboard_image is None:&#13;&#10;                return False, &quot;No content in clipboard&quot;&#13;&#10;&#13;&#10;            if not isinstance(clipboard_image, Image.Image):&#13;&#10;                return False, &quot;Clipboard content is not an image&quot;&#13;&#10;&#13;&#10;            return True, f&quot;Image found: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels, {clipboard_image.mode} mode&quot;&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            return False, f&quot;Error checking clipboard: {str(e)}&quot;&#13;&#10;&#13;&#10;    def _create_html_with_local_image(self, title, image_path, content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create HTML content with local image reference&quot;&quot;&quot;&#13;&#10;        filename = os.path.basename(image_path)&#13;&#10;&#13;&#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#13;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#13;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#13;&#10;    &lt;img src=&quot;name:{filename}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;&quot;&quot;&quot;&#13;&#10;        return html_content&#13;&#10;&#13;&#10;    def _create_html_with_remote_image(self, title, image_url, content=&quot;&quot;):&#13;&#10;        &quot;&quot;&quot;Create HTML content with remote image URL&quot;&quot;&quot;&#13;&#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#13;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#13;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#13;&#10;    &lt;img src=&quot;{image_url}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;&quot;&quot;&quot;&#13;&#10;        return html_content&#13;&#10;&#13;&#10;    def _create_page_multipart(self, url, html_content, image_path):&#13;&#10;        &quot;&quot;&quot;Create a page with multipart request for local image&quot;&quot;&quot;&#13;&#10;        import uuid&#13;&#10;&#13;&#10;        # Generate boundary for multipart request&#13;&#10;        boundary = f&quot;Part_{uuid.uuid4().hex}&quot;&#13;&#10;&#13;&#10;        # Get image content type&#13;&#10;        content_type, _ = mimetypes.guess_type(image_path)&#13;&#10;        if not content_type:&#13;&#10;            content_type = 'application/octet-stream'&#13;&#10;&#13;&#10;        # Read image file&#13;&#10;        with open(image_path, 'rb') as image_file:&#13;&#10;            image_data = image_file.read()&#13;&#10;&#13;&#10;        filename = os.path.basename(image_path)&#13;&#10;&#13;&#10;        # Create multipart body&#13;&#10;        multipart_body = f&quot;&quot;&quot;--{boundary}\r&#13;&#10;Content-Disposition: form-data; name=&quot;Presentation&quot;\r&#13;&#10;Content-Type: text/html\r&#13;&#10;\r&#13;&#10;{html_content}\r&#13;&#10;--{boundary}\r&#13;&#10;Content-Disposition: form-data; name=&quot;{filename}&quot;\r&#13;&#10;Content-Type: {content_type}\r&#13;&#10;\r&#13;&#10;&quot;&quot;&quot;.encode('utf-8')&#13;&#10;&#13;&#10;        multipart_body += image_data&#13;&#10;        multipart_body += f&quot;\r\n--{boundary}--\r\n&quot;.encode('utf-8')&#13;&#10;&#13;&#10;        # Set headers for multipart request&#13;&#10;        headers = {&#13;&#10;            'Authorization': f'Bearer {self.access_token}',&#13;&#10;            'Content-Type': f'multipart/form-data; boundary={boundary}'&#13;&#10;        }&#13;&#10;&#13;&#10;        response = requests.post(url, headers=headers, data=multipart_body)&#13;&#10;        response.raise_for_status()&#13;&#10;&#13;&#10;        page_data = response.json()&#13;&#10;        print(f&quot;✅ Page with local image created successfully!&quot;)&#13;&#10;        print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#13;&#10;&#13;&#10;        # Try to get the web URL&#13;&#10;        web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#13;&#10;        if web_url:&#13;&#10;            print(f&quot;    Page URL: {web_url}&quot;)&#13;&#10;&#13;&#10;        return page_data&#13;&#10;&#13;&#10;    def find_notebook_by_name(self, notebook_name):&#13;&#10;        &quot;&quot;&quot;Find a notebook by name&quot;&quot;&quot;&#13;&#10;        notebooks = self.get_notebooks()&#13;&#10;        for notebook in notebooks:&#13;&#10;            if notebook['displayName'].lower() == notebook_name.lower():&#13;&#10;                return notebook&#13;&#10;        return None&#13;&#10;&#13;&#10;    def find_section_by_name(self, notebook_id, section_name):&#13;&#10;        &quot;&quot;&quot;Find a section by name within a notebook&quot;&quot;&quot;&#13;&#10;        sections = self.get_sections(notebook_id)&#13;&#10;        for section in sections:&#13;&#10;            if section['displayName'].lower() == section_name.lower():&#13;&#10;                return section&#13;&#10;        return None&#13;&#10;&#13;&#10;    def get_supported_image_formats(self):&#13;&#10;        &quot;&quot;&quot;Get list of supported image formats&quot;&quot;&quot;&#13;&#10;        return ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg']&#13;&#10;&#13;&#10;    def validate_image_file(self, image_path):&#13;&#10;        &quot;&quot;&quot;Validate if the image file is supported and exists&quot;&quot;&quot;&#13;&#10;        if not os.path.exists(image_path):&#13;&#10;            print(f&quot;❌ Image file not found: {image_path}&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;        _, ext = os.path.splitext(image_path.lower())&#13;&#10;        if ext not in self.get_supported_image_formats():&#13;&#10;            print(f&quot;❌ Unsupported image format: {ext}&quot;)&#13;&#10;            print(f&quot;Supported formats: {', '.join(self.get_supported_image_formats())}&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;        # Check file size (OneNote has a 100MB limit per attachment)&#13;&#10;        file_size = os.path.getsize(image_path)&#13;&#10;        max_size = 100 * 1024 * 1024  # 100MB in bytes&#13;&#10;        if file_size &gt; max_size:&#13;&#10;            print(f&quot;❌ Image file too large: {file_size / (1024*1024):.2f}MB (max: 100MB)&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;        print(f&quot;✅ Image file validated: {image_path} ({file_size / 1024:.2f}KB)&quot;)&#13;&#10;        return True&#13;&#10;&#13;&#10;    def _get_current_datetime(self):&#13;&#10;        &quot;&quot;&quot;Get current datetime in ISO format&quot;&quot;&quot;&#13;&#10;        from datetime import datetime&#13;&#10;        return datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#13;&#10;&#13;&#10;    def get_or_create_default_page(self):&#13;&#10;        &quot;&quot;&quot;Get or create the default page based on .env settings&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            # Get default notebook&#13;&#10;            if not self._cached_notebook:&#13;&#10;                if self.default_notebook:&#13;&#10;                    self._cached_notebook = self.find_notebook_by_name(self.default_notebook)&#13;&#10;                    if not self._cached_notebook:&#13;&#10;                        print(f&quot;❌ Default notebook '{self.default_notebook}' not found.&quot;)&#13;&#10;                        return None&#13;&#10;                else:&#13;&#10;                    print(&quot; No default notebook specified. Please set DEFAULT_NOTEBOOK in .env file.&quot;)&#13;&#10;                    return None&#13;&#10;&#13;&#10;            # Get default section&#13;&#10;            if not self._cached_section:&#13;&#10;                if self.default_section:&#13;&#10;                    self._cached_section = self.find_section_by_name(self._cached_notebook['id'], self.default_section)&#13;&#10;                    if not self._cached_section:&#13;&#10;                        print(f&quot;❌ Default section '{self.default_section}' not found.&quot;)&#13;&#10;                        return None&#13;&#10;                else:&#13;&#10;                    print(&quot; No default section specified. Please set DEFAULT_SECTION in .env file.&quot;)&#13;&#10;                    return None&#13;&#10;&#13;&#10;            # Get or create default page&#13;&#10;            if not self._cached_page:&#13;&#10;                if self.default_page:&#13;&#10;                    self._cached_page = self.find_page_by_name(self._cached_section['id'], self.default_page)&#13;&#10;                    if not self._cached_page:&#13;&#10;                        print(f&quot; Creating new page '{self.default_page}'...&quot;)&#13;&#10;                        self._cached_page = self.create_page(self._cached_section['id'], self.default_page, &quot;&quot;)&#13;&#10;                    else:&#13;&#10;                        print(f&quot; Using existing page '{self.default_page}'&quot;)&#13;&#10;                else:&#13;&#10;                    print(&quot; No default page specified. Please set DEFAULT_PAGE in .env file.&quot;)&#13;&#10;                    return None&#13;&#10;&#13;&#10;            return self._cached_page&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            print(f&quot;❌ Error getting/creating default page: {str(e)}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def find_page_by_name(self, section_id, page_name):&#13;&#10;        &quot;&quot;&quot;Find a page by name within a section&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#13;&#10;            response = requests.get(url, headers=self.get_headers())&#13;&#10;            response.raise_for_status()&#13;&#10;&#13;&#10;            pages = response.json().get('value', [])&#13;&#10;            for page in pages:&#13;&#10;                if page['title'].lower() == page_name.lower():&#13;&#10;                    return page&#13;&#10;            return None&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error finding page: {str(e)}&quot;)&#13;&#10;            return None&#13;&#10;&#13;&#10;    def add_image_to_page(self, page_id, image_path=None, image_url=None):&#13;&#10;        &quot;&quot;&quot;Add an image to an existing OneNote page&quot;&quot;&quot;&#13;&#10;        try:&#13;&#10;            url = f&quot;{self.graph_url}/me/onenote/pages/{page_id}/content&quot;&#13;&#10;&#13;&#10;            if image_path and os.path.exists(image_path):&#13;&#10;                return self._add_local_image_to_page(url, image_path)&#13;&#10;            elif image_url:&#13;&#10;                return self._add_remote_image_to_page(url, image_url)&#13;&#10;            else:&#13;&#10;                print(&quot;❌ No valid image path or URL provided&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;        except requests.exceptions.RequestException as e:&#13;&#10;            print(f&quot;❌ Error adding image to page: {str(e)}&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;    def _add_local_image_to_page(self, url, image_path):&#13;&#10;        &quot;&quot;&quot;Add a local image to an existing page using PATCH request&quot;&quot;&quot;&#13;&#10;        import uuid&#13;&#10;&#13;&#10;        boundary = f&quot;Part_{uuid.uuid4().hex}&quot;&#13;&#10;        content_type, _ = mimetypes.guess_type(image_path)&#13;&#10;        if not content_type:&#13;&#10;            content_type = 'application/octet-stream'&#13;&#10;&#13;&#10;        with open(image_path, 'rb') as image_file:&#13;&#10;            image_data = image_file.read()&#13;&#10;&#13;&#10;        filename = os.path.basename(image_path)&#13;&#10;&#13;&#10;        # Create patch content to append image with one line break&#13;&#10;        patch_content = f&quot;&quot;&quot;[{{&#13;&#10;    &quot;target&quot;: &quot;body&quot;,&#13;&#10;    &quot;action&quot;: &quot;append&quot;,&#13;&#10;    &quot;content&quot;: &quot;&lt;br/&gt;&lt;img src=\\&quot;name:{filename}\\&quot; alt=\\&quot;{filename}\\&quot; style=\\&quot;max-width: 100%; height: auto;\\&quot; /&gt;&quot;&#13;&#10;}}]&quot;&quot;&quot;&#13;&#10;&#13;&#10;        # Create multipart body&#13;&#10;        multipart_body = f&quot;&quot;&quot;--{boundary}\r&#13;&#10;Content-Disposition: form-data; name=&quot;Commands&quot;\r&#13;&#10;Content-Type: application/json\r&#13;&#10;\r&#13;&#10;{patch_content}\r&#13;&#10;--{boundary}\r&#13;&#10;Content-Disposition: form-data; name=&quot;{filename}&quot;\r&#13;&#10;Content-Type: {content_type}\r&#13;&#10;\r&#13;&#10;&quot;&quot;&quot;.encode('utf-8')&#13;&#10;&#13;&#10;        multipart_body += image_data&#13;&#10;        multipart_body += f&quot;\r\n--{boundary}--\r\n&quot;.encode('utf-8')&#13;&#10;&#13;&#10;        headers = {&#13;&#10;            'Authorization': f'Bearer {self.access_token}',&#13;&#10;            'Content-Type': f'multipart/form-data; boundary={boundary}'&#13;&#10;        }&#13;&#10;&#13;&#10;        response = requests.patch(url, headers=headers, data=multipart_body)&#13;&#10;        response.raise_for_status()&#13;&#10;&#13;&#10;        print(f&quot;✅ Image '{filename}' added to page successfully!&quot;)&#13;&#10;        return True&#13;&#10;&#13;&#10;    def _add_remote_image_to_page(self, url, image_url):&#13;&#10;        &quot;&quot;&quot;Add a remote image to an existing page using PATCH request&quot;&quot;&quot;&#13;&#10;        patch_content = [{&#13;&#10;            &quot;target&quot;: &quot;body&quot;,&#13;&#10;            &quot;action&quot;: &quot;append&quot;,&#13;&#10;            &quot;content&quot;: f'&lt;br/&gt;&lt;img src=&quot;{image_url}&quot; alt=&quot;Remote Image&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;'&#13;&#10;        }]&#13;&#10;&#13;&#10;        headers = self.get_headers()&#13;&#10;        response = requests.patch(url, headers=headers, json=patch_content)&#13;&#10;        response.raise_for_status()&#13;&#10;&#13;&#10;        print(f&quot;✅ Remote image added to page successfully!&quot;)&#13;&#10;        return True&#13;&#10;&#13;&#10;    def quick_add_clipboard_image(self):&#13;&#10;        &quot;&quot;&quot;Quick add clipboard image to default page - main hotkey function&quot;&quot;&quot;&#13;&#10;        if not PIL_AVAILABLE:&#13;&#10;            print(&quot;❌ PIL (Pillow) library not installed. Please install it with: pip install Pillow&quot;)&#13;&#10;            return False&#13;&#10;&#13;&#10;        # Ensure authentication&#13;&#10;        if not self.access_token:&#13;&#10;            if not self.authenticate():&#13;&#10;                print(&quot;❌ Authentication failed&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;        # Get clipboard image&#13;&#10;        try:&#13;&#10;            clipboard_image = ImageGrab.grabclipboard()&#13;&#10;&#13;&#10;            if clipboard_image is None:&#13;&#10;                print(&quot;❌ No image found in clipboard&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;            if not isinstance(clipboard_image, Image.Image):&#13;&#10;                print(&quot;❌ Clipboard content is not an image&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;            print(f&quot; Image found: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels&quot;)&#13;&#10;&#13;&#10;            # Get or create default page&#13;&#10;            page = self.get_or_create_default_page()&#13;&#10;            if not page:&#13;&#10;                print(&quot;❌ Could not get/create default page&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;            # Save clipboard image to temporary file&#13;&#10;            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)&#13;&#10;            temp_path = temp_file.name&#13;&#10;            temp_file.close()&#13;&#10;&#13;&#10;            # Convert image if necessary&#13;&#10;            if clipboard_image.mode in ('RGBA', 'LA'):&#13;&#10;                background = Image.new('RGB', clipboard_image.size, (255, 255, 255))&#13;&#10;                if clipboard_image.mode == 'RGBA':&#13;&#10;                    background.paste(clipboard_image, mask=clipboard_image.split()[-1])&#13;&#10;                else:&#13;&#10;                    background.paste(clipboard_image)&#13;&#10;                clipboard_image = background&#13;&#10;            elif clipboard_image.mode != 'RGB':&#13;&#10;                clipboard_image = clipboard_image.convert('RGB')&#13;&#10;&#13;&#10;            clipboard_image.save(temp_path, 'PNG', optimize=True)&#13;&#10;&#13;&#10;            # Add image to page&#13;&#10;            result = self.add_image_to_page(page['id'], image_path=temp_path)&#13;&#10;&#13;&#10;            # Clean up&#13;&#10;            try:&#13;&#10;                os.unlink(temp_path)&#13;&#10;            except:&#13;&#10;                pass&#13;&#10;&#13;&#10;            if result:&#13;&#10;                print(f&quot;✅ Image added to page '{page['title']}' successfully!&quot;)&#13;&#10;                return True&#13;&#10;            else:&#13;&#10;                print(&quot;❌ Failed to add image to page&quot;)&#13;&#10;                return False&#13;&#10;&#13;&#10;        except Exception as e:&#13;&#10;            print(f&quot;❌ Error: {str(e)}&quot;)&#13;&#10;            return False" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/onenote_automation_fixed.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/onenote_automation_fixed.py" />
              <option name="updatedContent" value="import os&#10;import requests&#10;import json&#10;import webbrowser&#10;import urllib.parse&#10;import base64&#10;import mimetypes&#10;import io&#10;import tempfile&#10;from msal import PublicClientApplication&#10;from dotenv import load_dotenv&#10;&#10;try:&#10;    from PIL import ImageGrab, Image&#10;    PIL_AVAILABLE = True&#10;except ImportError:&#10;    PIL_AVAILABLE = False&#10;&#10;class OneNoteAutomation:&#10;    def __init__(self):&#10;        load_dotenv()&#10;        self.client_id = os.getenv('CLIENT_ID')&#10;        self.tenant_id = os.getenv('TENANT_ID', 'common')&#10;        self.account_type = os.getenv('ACCOUNT_TYPE', 'personal')&#10;        self.user_email = os.getenv('USER_EMAIL')&#10;&#10;        if not self.client_id:&#10;            raise ValueError(&quot;Missing CLIENT_ID in environment variables. Please check your .env file.&quot;)&#10;&#10;        # For personal accounts, use common endpoint&#10;        if self.account_type == 'personal':&#10;            self.authority = &quot;https://login.microsoftonline.com/common&quot;&#10;            self.scope = [&#10;                &quot;https://graph.microsoft.com/Notes.ReadWrite&quot;,&#10;                &quot;https://graph.microsoft.com/Notes.Read&quot;&#10;            ]&#10;        else:&#10;            self.authority = f&quot;https://login.microsoftonline.com/{self.tenant_id}&quot;&#10;            self.scope = [&quot;https://graph.microsoft.com/.default&quot;]&#10;&#10;        self.graph_url = &quot;https://graph.microsoft.com/v1.0&quot;&#10;&#10;        # Use PublicClientApplication for personal accounts&#10;        self.app = PublicClientApplication(&#10;            client_id=self.client_id,&#10;            authority=self.authority&#10;        )&#10;&#10;        self.access_token = None&#10;        self.account = None&#10;&#10;    def authenticate(self):&#10;        &quot;&quot;&quot;Authenticate using interactive browser flow for personal accounts&quot;&quot;&quot;&#10;        try:&#10;            # Try to get token silently first (if user has authenticated before)&#10;            accounts = self.app.get_accounts()&#10;            if accounts:&#10;                print(&quot;Found existing account, attempting silent authentication...&quot;)&#10;                result = self.app.acquire_token_silent(self.scope, account=accounts[0])&#10;                if result and &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    self.account = accounts[0]&#10;                    print(&quot;✅ Silent authentication successful!&quot;)&#10;                    return True&#10;&#10;            # If silent auth fails, use interactive browser flow&#10;            print(&quot;Starting interactive authentication...&quot;)&#10;            print(&quot;This will open a browser window for authentication.&quot;)&#10;&#10;            try:&#10;                # Try interactive browser flow first (more reliable)&#10;                result = self.app.acquire_token_interactive(&#10;                    scopes=self.scope,&#10;                    prompt=&quot;select_account&quot;&#10;                )&#10;&#10;                if &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;                else:&#10;                    print(f&quot;❌ Interactive authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#10;&#10;            except Exception as interactive_error:&#10;                print(f&quot;Interactive flow failed: {str(interactive_error)}&quot;)&#10;                print(&quot;Falling back to device code flow...&quot;)&#10;&#10;                # Fallback to device code flow&#10;                flow = self.app.initiate_device_flow(scopes=self.scope)&#10;&#10;                if &quot;user_code&quot; not in flow:&#10;                    print(f&quot;Device flow error: {flow.get('error', 'Unknown error')}&quot;)&#10;                    print(f&quot;Error description: {flow.get('error_description', 'No description')}&quot;)&#10;                    raise ValueError(&quot;Failed to create device flow&quot;)&#10;&#10;                print(f&quot;\n Please visit: {flow['verification_uri']}&quot;)&#10;                print(f&quot; Enter code: {flow['user_code']}&quot;)&#10;                print(&quot;\nOpening browser automatically...&quot;)&#10;&#10;                # Open browser automatically&#10;                webbrowser.open(flow['verification_uri'])&#10;&#10;                input(&quot;\nPress Enter after completing authentication in the browser...&quot;)&#10;&#10;                # Complete the flow&#10;                result = self.app.acquire_token_by_device_flow(flow)&#10;&#10;                if &quot;access_token&quot; in result:&#10;                    self.access_token = result[&quot;access_token&quot;]&#10;                    print(&quot;✅ Authentication successful!&quot;)&#10;                    return True&#10;                else:&#10;                    print(f&quot;❌ Device flow authentication failed: {result.get('error_description', 'Unknown error')}&quot;)&#10;                    return False&#10;&#10;        except Exception as e:&#10;            print(f&quot;❌ Authentication error: {str(e)}&quot;)&#10;            print(&quot;\n Troubleshooting tips:&quot;)&#10;            print(&quot;1. Make sure your app registration supports 'Personal Microsoft accounts'&quot;)&#10;            print(&quot;2. Check that your CLIENT_ID is correct&quot;)&#10;            print(&quot;3. Verify the app has proper redirect URIs configured&quot;)&#10;            print(&quot;4. Ensure the app has Notes.ReadWrite permissions&quot;)&#10;            print(&quot;5. Add 'http://localhost' as a redirect URI in Azure Portal&quot;)&#10;            return False&#10;&#10;    def get_headers(self):&#10;        &quot;&quot;&quot;Get headers for API requests&quot;&quot;&quot;&#10;        if not self.access_token:&#10;            raise ValueError(&quot;Not authenticated. Call authenticate() first.&quot;)&#10;&#10;        return {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': 'application/json'&#10;        }&#10;&#10;    def get_notebooks(self):&#10;        &quot;&quot;&quot;Get all notebooks for the authenticated user&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks&quot;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            notebooks = response.json().get('value', [])&#10;            print(f&quot; Found {len(notebooks)} notebooks:&quot;)&#10;            for nb in notebooks:&#10;                print(f&quot;   {nb['displayName']} (ID: {nb['id']})&quot;)&#10;&#10;            return notebooks&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting notebooks: {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return []&#10;&#10;    def get_sections(self, notebook_id):&#10;        &quot;&quot;&quot;Get all sections in a notebook&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/notebooks/{notebook_id}/sections&quot;&#10;            response = requests.get(url, headers=self.get_headers())&#10;            response.raise_for_status()&#10;&#10;            sections = response.json().get('value', [])&#10;            print(f&quot; Found {len(sections)} sections:&quot;)&#10;            for section in sections:&#10;                print(f&quot;   {section['displayName']} (ID: {section['id']})&quot;)&#10;&#10;            return sections&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error getting sections: {str(e)}&quot;)&#10;            return []&#10;&#10;    def create_page(self, section_id, page_title, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page in a specific section&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;&#10;            # Escape HTML characters in title to preserve exact formatting&#10;            import html&#10;            escaped_title = html.escape(page_title)&#10;&#10;            # Create HTML content for the page with preserved formatting&#10;            html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{escaped_title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{escaped_title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{page_content}&lt;/p&gt;' if page_content else ''}&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;&#10;            headers = self.get_headers()&#10;            headers['Content-Type'] = 'text/html'&#10;&#10;            response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#10;            response.raise_for_status()&#10;&#10;            page_data = response.json()&#10;            print(f&quot;✅ Page '{page_title}' created successfully!&quot;)&#10;            print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#10;&#10;            # Try to get the web URL&#10;            web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#10;            if web_url:&#10;                print(f&quot;    Page URL: {web_url}&quot;)&#10;&#10;            return page_data&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error creating page '{page_title}': {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return None&#10;&#10;    def create_page_with_image(self, section_id, page_title, image_path=None, image_url=None, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page with an embedded image&quot;&quot;&quot;&#10;        try:&#10;            url = f&quot;{self.graph_url}/me/onenote/sections/{section_id}/pages&quot;&#10;&#10;            # Escape HTML characters in title to preserve exact formatting&#10;            import html&#10;            escaped_title = html.escape(page_title)&#10;&#10;            # Create HTML content with image&#10;            if image_path and os.path.exists(image_path):&#10;                # Local image file&#10;                html_content = self._create_html_with_local_image(escaped_title, image_path, page_content)&#10;                return self._create_page_multipart(url, html_content, image_path)&#10;                &#10;            elif image_url:&#10;                # Remote image URL&#10;                html_content = self._create_html_with_remote_image(escaped_title, image_url, page_content)&#10;                &#10;                headers = self.get_headers()&#10;                headers['Content-Type'] = 'text/html'&#10;&#10;                response = requests.post(url, headers=headers, data=html_content.encode('utf-8'))&#10;                response.raise_for_status()&#10;&#10;                page_data = response.json()&#10;                print(f&quot;✅ Page '{page_title}' with image created successfully!&quot;)&#10;                return page_data&#10;            else:&#10;                print(&quot;❌ No valid image path or URL provided&quot;)&#10;                return None&#10;&#10;        except requests.exceptions.RequestException as e:&#10;            print(f&quot;❌ Error creating page with image '{page_title}': {str(e)}&quot;)&#10;            if hasattr(e, 'response') and e.response is not None:&#10;                print(f&quot;Response status: {e.response.status_code}&quot;)&#10;                print(f&quot;Response text: {e.response.text}&quot;)&#10;            return None&#10;&#10;    def create_page_with_clipboard_image(self, section_id, page_title, page_content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create a new page with an image from clipboard&quot;&quot;&quot;&#10;        if not PIL_AVAILABLE:&#10;            print(&quot;❌ PIL (Pillow) library not installed. Please install it with: pip install Pillow&quot;)&#10;            return None&#10;&#10;        try:&#10;            # Get image from clipboard&#10;            clipboard_image = ImageGrab.grabclipboard()&#10;            &#10;            if clipboard_image is None:&#10;                print(&quot;❌ No image found in clipboard. Please copy an image first.&quot;)&#10;                return None&#10;            &#10;            if not isinstance(clipboard_image, Image.Image):&#10;                print(&quot;❌ Clipboard content is not an image.&quot;)&#10;                return None&#10;            &#10;            print(&quot;✅ Image found in clipboard!&quot;)&#10;            print(f&quot;    Size: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels&quot;)&#10;            print(f&quot;    Mode: {clipboard_image.mode}&quot;)&#10;            &#10;            # Save clipboard image to temporary file&#10;            temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)&#10;            temp_path = temp_file.name&#10;            temp_file.close()&#10;            &#10;            # Convert to RGB if necessary (for PNG compatibility)&#10;            if clipboard_image.mode in ('RGBA', 'LA'):&#10;                # Create white background for transparent images&#10;                background = Image.new('RGB', clipboard_image.size, (255, 255, 255))&#10;                if clipboard_image.mode == 'RGBA':&#10;                    background.paste(clipboard_image, mask=clipboard_image.split()[-1])&#10;                else:&#10;                    background.paste(clipboard_image)&#10;                clipboard_image = background&#10;            elif clipboard_image.mode != 'RGB':&#10;                clipboard_image = clipboard_image.convert('RGB')&#10;            &#10;            # Save as PNG&#10;            clipboard_image.save(temp_path, 'PNG', optimize=True)&#10;            &#10;            print(f&quot; Saved clipboard image to temporary file: {temp_path}&quot;)&#10;            &#10;            # Create page with the temporary image&#10;            result = self.create_page_with_image(&#10;                section_id=section_id,&#10;                page_title=page_title,&#10;                image_path=temp_path,&#10;                page_content=page_content&#10;            )&#10;            &#10;            # Clean up temporary file&#10;            try:&#10;                os.unlink(temp_path)&#10;                print(&quot;️ Cleaned up temporary file&quot;)&#10;            except:&#10;                pass  # Ignore cleanup errors&#10;            &#10;            return result&#10;            &#10;        except Exception as e:&#10;            print(f&quot;❌ Error creating page with clipboard image: {str(e)}&quot;)&#10;            return None&#10;&#10;    def check_clipboard_for_image(self):&#10;        &quot;&quot;&quot;Check if clipboard contains an image&quot;&quot;&quot;&#10;        if not PIL_AVAILABLE:&#10;            return False, &quot;PIL (Pillow) library not installed&quot;&#10;        &#10;        try:&#10;            clipboard_image = ImageGrab.grabclipboard()&#10;            if clipboard_image is None:&#10;                return False, &quot;No content in clipboard&quot;&#10;            &#10;            if not isinstance(clipboard_image, Image.Image):&#10;                return False, &quot;Clipboard content is not an image&quot;&#10;            &#10;            return True, f&quot;Image found: {clipboard_image.size[0]}x{clipboard_image.size[1]} pixels, {clipboard_image.mode} mode&quot;&#10;            &#10;        except Exception as e:&#10;            return False, f&quot;Error checking clipboard: {str(e)}&quot;&#10;&#10;    def _create_html_with_local_image(self, title, image_path, content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create HTML content with local image reference&quot;&quot;&quot;&#10;        filename = os.path.basename(image_path)&#10;        &#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#10;    &lt;img src=&quot;name:{filename}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;        return html_content&#10;&#10;    def _create_html_with_remote_image(self, title, image_url, content=&quot;&quot;):&#10;        &quot;&quot;&quot;Create HTML content with remote image URL&quot;&quot;&quot;&#10;        html_content = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;{title}&lt;/title&gt;&#10;    &lt;meta name=&quot;created&quot; content=&quot;{self._get_current_datetime()}&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;{title}&lt;/h1&gt;&#10;    {f'&lt;p&gt;{content}&lt;/p&gt;' if content else ''}&#10;    &lt;img src=&quot;{image_url}&quot; alt=&quot;{title}&quot; style=&quot;max-width: 100%; height: auto;&quot; /&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&quot;&quot;&quot;&#10;        return html_content&#10;&#10;    def _create_page_multipart(self, url, html_content, image_path):&#10;        &quot;&quot;&quot;Create a page with multipart request for local image&quot;&quot;&quot;&#10;        import uuid&#10;        &#10;        # Generate boundary for multipart request&#10;        boundary = f&quot;Part_{uuid.uuid4().hex}&quot;&#10;        &#10;        # Get image content type&#10;        content_type, _ = mimetypes.guess_type(image_path)&#10;        if not content_type:&#10;            content_type = 'application/octet-stream'&#10;        &#10;        # Read image file&#10;        with open(image_path, 'rb') as image_file:&#10;            image_data = image_file.read()&#10;        &#10;        filename = os.path.basename(image_path)&#10;        &#10;        # Create multipart body&#10;        multipart_body = f&quot;&quot;&quot;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;Presentation&quot;\r&#10;Content-Type: text/html\r&#10;\r&#10;{html_content}\r&#10;--{boundary}\r&#10;Content-Disposition: form-data; name=&quot;{filename}&quot;\r&#10;Content-Type: {content_type}\r&#10;\r&#10;&quot;&quot;&quot;.encode('utf-8')&#10;        &#10;        multipart_body += image_data&#10;        multipart_body += f&quot;\r\n--{boundary}--\r\n&quot;.encode('utf-8')&#10;        &#10;        # Set headers for multipart request&#10;        headers = {&#10;            'Authorization': f'Bearer {self.access_token}',&#10;            'Content-Type': f'multipart/form-data; boundary={boundary}'&#10;        }&#10;        &#10;        response = requests.post(url, headers=headers, data=multipart_body)&#10;        response.raise_for_status()&#10;        &#10;        page_data = response.json()&#10;        print(f&quot;✅ Page with local image created successfully!&quot;)&#10;        print(f&quot;    Page ID: {page_data.get('id')}&quot;)&#10;        &#10;        # Try to get the web URL&#10;        web_url = page_data.get('links', {}).get('oneNoteWebUrl', {}).get('href')&#10;        if web_url:&#10;            print(f&quot;    Page URL: {web_url}&quot;)&#10;        &#10;        return page_data&#10;&#10;    def find_notebook_by_name(self, notebook_name):&#10;        &quot;&quot;&quot;Find a notebook by name&quot;&quot;&quot;&#10;        notebooks = self.get_notebooks()&#10;        for notebook in notebooks:&#10;            if notebook['displayName'].lower() == notebook_name.lower():&#10;                return notebook&#10;        return None&#10;&#10;    def find_section_by_name(self, notebook_id, section_name):&#10;        &quot;&quot;&quot;Find a section by name within a notebook&quot;&quot;&quot;&#10;        sections = self.get_sections(notebook_id)&#10;        for section in sections:&#10;            if section['displayName'].lower() == section_name.lower():&#10;                return section&#10;        return None&#10;&#10;    def get_supported_image_formats(self):&#10;        &quot;&quot;&quot;Get list of supported image formats&quot;&quot;&quot;&#10;        return ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg']&#10;&#10;    def validate_image_file(self, image_path):&#10;        &quot;&quot;&quot;Validate if the image file is supported and exists&quot;&quot;&quot;&#10;        if not os.path.exists(image_path):&#10;            print(f&quot;❌ Image file not found: {image_path}&quot;)&#10;            return False&#10;        &#10;        _, ext = os.path.splitext(image_path.lower())&#10;        if ext not in self.get_supported_image_formats():&#10;            print(f&quot;❌ Unsupported image format: {ext}&quot;)&#10;            print(f&quot;Supported formats: {', '.join(self.get_supported_image_formats())}&quot;)&#10;            return False&#10;        &#10;        # Check file size (OneNote has a 100MB limit per attachment)&#10;        file_size = os.path.getsize(image_path)&#10;        max_size = 100 * 1024 * 1024  # 100MB in bytes&#10;        if file_size &gt; max_size:&#10;            print(f&quot;❌ Image file too large: {file_size / (1024*1024):.2f}MB (max: 100MB)&quot;)&#10;            return False&#10;        &#10;        print(f&quot;✅ Image file validated: {image_path} ({file_size / 1024:.2f}KB)&quot;)&#10;        return True&#10;&#10;    def _get_current_datetime(self):&#10;        &quot;&quot;&quot;Get current datetime in ISO format&quot;&quot;&quot;&#10;        from datetime import datetime&#10;        return datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="originalContent" value="requests==2.32.4&#10;msal==1.24.1&#10;python-dotenv==1.0.0&#10;Pillow==10.0.0&#10;" />
              <option name="updatedContent" value="requests&gt;=2.31.0&#13;&#10;msal&gt;=1.24.1&#13;&#10;python-dotenv&gt;=1.0.0&#13;&#10;Pillow&gt;=9.0.0&#13;&#10;keyboard&gt;=0.13.5" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>